{"version":3,"file":"index.cjs","sources":["../src/lib/isPlainObject.ts","../src/constants.ts","../src/lib/isProxy.ts","../src/lib/sprintf.ts","../src/context.tsx","../src/usePrismicPreviewContext.tsx","../src/useMergePrismicPreviewData.ts","../src/usePrismicPreviewAccessToken.ts","../src/lib/extractPreviewRefRepositoryName.ts","../src/lib/buildTypePathsStoreFilename.ts","../src/lib/fetchTypePaths.ts","../src/usePrismicPreviewBootstrap.ts","../src/lib/getURLSearchParam.ts","../src/usePrismicPreviewResolver.ts","../src/lib/getComponentDisplayName.ts","../src/lib/userFriendlyError.ts","../src/components/Root.tsx","../src/components/Modal.tsx","../src/components/Button.tsx","../src/components/Text.tsx","../src/components/ModalAccessToken.tsx","../src/components/ModalError.tsx","../src/components/ModalLoading.tsx","../src/components/PrismicPreviewUI.tsx","../src/withPrismicPreview.tsx","../src/withPrismicPreviewResolver.tsx","../src/lib/camelCase.ts","../src/withPrismicUnpublishedPreview.tsx"],"sourcesContent":["/**\n * Determines if an object is a plain object.\n *\n * @param value - The value to check.\n *\n * @returns True if value is a plain object, false otherwise.\n */\nexport const isPlainObject = <\n\tT extends Record<PropertyKey, unknown> = Record<PropertyKey, unknown>,\n>(\n\tvalue: unknown,\n): value is T => {\n\treturn typeof value === \"object\" && value !== null && !Array.isArray(value);\n};\n","import * as pkg from \"../package.json\";\n\n/**\n * Version of the gatsby-plugin-prismic-preview plugin. This version may be\n * displayed publicly to help debug errors.\n */\nexport const VERSION = pkg.version;\n\n/**\n * Symbol used to identify if a value is a proxy. Attach this to proxies (done\n * automatically via `lib/createGetProxy`).\n */\nexport const IS_PROXY = Symbol(\"IS_PROXY\");\n\n/**\n * Default value for the `toolbar` plugin option which determines which version\n * of the Prismic Toolbar to render.\n */\nexport const DEFAULT_TOOLBAR = \"new\";\n\n/**\n * Default value for the `promptForAccessToken` plugin option which determines\n * if an editor should be prompted for an access token if one has not already\n * been provided.\n */\nexport const DEFAULT_PROMPT_FOR_ACCESS_TOKEN = true;\n\n/**\n * Default page size for Prismic API query requests. This is the maximum allowed\n * page size to minimize the number of requests.\n */\nexport const QUERY_PAGE_SIZE = 100;\n\n/**\n * Template used to generate a hash for a collection of type paths.\n */\nexport const TYPE_PATHS_BASENAME_TEMPLATE = \"type-paths-store %s\";\n\n/**\n * Identifier used to store plugin options on `window` to pass to other parts of\n * the preview system.\n */\nexport const WINDOW_PLUGIN_OPTIONS_KEY =\n\t\"__GATSBY_PLUGIN_PRISMIC_PREVIEWS_PLUGIN_OPTIONS__\";\n\n/**\n * Identifier used to store plugin options on `window` to pass to other parts of\n * the preview system.\n */\nexport const WINDOW_PROVIDER_PRESENCE_KEY =\n\t\"__GATSBY_PLUGIN_PRISMIC_PREVIEWS_PROVIDER_PRESENCE__\";\n\n/**\n * Name of the locally stored Prismic repository access token.\n */\nexport const COOKIE_ACCESS_TOKEN_NAME =\n\t\"gatsby-plugin-prismic-previews.%s.accessToken\";\n\n/**\n * Template used when reporting which includes a namespace.\n */\nexport const REPORTER_TEMPLATE = \"gatsby-plugin-prismic-previews(%s) - %s\";\n\n/**\n * Template used to report the location of the serialized type paths store.\n */\nexport const WROTE_TYPE_PATHS_TO_FS_MSG = \"Wrote type paths store to %s\";\n\n/**\n * Message used when type paths cannot be found for a repository.\n */\nexport const TYPE_PATHS_MISSING_NODE_MSG = `Type paths for this repository could not be found. Check that you have gatsby-source-prismic configured with the same repository name and type prefix (if used) in gatsby-config.js.`;\n\n/**\n * Message used when serialized type paths cannot be found for a repository.\n */\nexport const TYPE_PATHS_MISSING_BROWSER_MSG =\n\t\"The type paths store for this repository could not be found.\";\n\n/**\n * Message used when a field does not match its expected type.\n */\nexport const FIELD_VALUE_TYPE_PATH_MISMATCH_MSG =\n\t'Field value at \"%s\" does not match the type declared in its type path: %s';\n\n/**\n * Message used when a repository configuration is not provided.\n */\nexport const MISSING_REPOSITORY_CONFIG_MSG =\n\t'A configuration object could not be found for repository \"%s\". Check that the repository is configured in your app\\'s %s.';\n\n/**\n * Message used when repository plugin options are not provided.\n */\nexport const MISSING_PLUGIN_OPTIONS_MSG =\n\t'Plugin options could not be found for repository \"%s\". Check that the repository is configured in your app\\'s gatsby-config.js';\n\n/**\n * Message used when the required context provider is not added.\n */\nexport const MISSING_PROVIDER_MSG = `A <PrismicPreviewProvider> was not found in your app. Add <PrismicPreviewProvider> to your app's gatsby-browser.js and gatsby-ssr.js wrapRootElement exports.\n\nSee: https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/#wrapRootElement\nSee: https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr/#wrapRootElement`;\n","import { IS_PROXY } from \"../constants\";\n\n/**\n * Determines if a value is a Proxy. The value must have the `IS_PROXY` property set.\n *\n * @param value - Value to test.\n *\n * @returns `true` if `value` is a Proxy, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isProxy = <T extends object>(value: T): boolean => {\n\treturn Boolean(\n\t\t// @ts-expect-error - We are forcibly adding this \"is proxy\" property\n\t\tvalue[IS_PROXY],\n\t);\n};\n","/**\n * Interpolate values into a string using a `sprintf`-like syntax. Each instance\n * of \"`%s`\" in the string will be replaced with a given value in the order they\n * are given.\n *\n * @param string - String into which values will be interpolated.\n * @param args - Values which will be interpolated into `string`.\n *\n * @returns String with interpolated values.\n * @see https://gist.github.com/rmariuzzo/8761698#gistcomment-2375590\n */\nexport const sprintf = (string: string, ...args: string[]): string => {\n\tlet i = 0;\n\n\treturn string.replace(/%s/g, () => args[i++]);\n};\n","import * as React from \"react\";\nimport * as gatsbyPrismic from \"gatsby-source-prismic\";\nimport * as prismicT from \"@prismicio/types\";\nimport * as cookie from \"es-cookie\";\n\nimport { sprintf } from \"./lib/sprintf\";\n\nimport {\n\tCOOKIE_ACCESS_TOKEN_NAME,\n\tWINDOW_PLUGIN_OPTIONS_KEY,\n\tWINDOW_PROVIDER_PRESENCE_KEY,\n} from \"./constants\";\nimport {\n\tPluginOptions,\n\tPrismicRepositoryConfig,\n\tPrismicUnpublishedRepositoryConfigs,\n} from \"./types\";\n\nexport type PrismicContextValue = readonly [\n\tPrismicContextState,\n\tReact.Dispatch<PrismicContextAction>,\n];\n\nexport enum PrismicPreviewState {\n\tIDLE = \"IDLE\",\n\tRESOLVING = \"RESOLVING\",\n\tRESOLVED = \"RESOLVED\",\n\tBOOTSTRAPPING = \"BOOTSTRAPPING\",\n\tACTIVE = \"ACTIVE\",\n\tPROMPT_FOR_ACCESS_TOKEN = \"PROMPT_FOR_ACCESS_TOKEN\",\n\tFAILED = \"FAILED\",\n\tNOT_PREVIEW = \"NOT_PREVIEW\",\n}\n\nexport type PrismicContextState = {\n\t/**\n\t * The repository name of the preview session, if active.\n\t */\n\tactiveRepositoryName: string | undefined;\n\t/**\n\t * The repository name of the preview session, if active.\n\t */\n\tpreviewState: PrismicPreviewState;\n\t/**\n\t * The error if the preview produced a failure.\n\t */\n\terror?: Error;\n\t/**\n\t * The resolved preview path if entered from a preview resolver page.\n\t */\n\tresolvedPath?: string;\n\t/**\n\t * Determines if all preview content has been fetched and prepared.\n\t */\n\tisBootstrapped: boolean;\n\t/**\n\t * Record of `gatsby-source-prismic` runtimes keyed by their repository name.\n\t */\n\truntimeStore: Record<string, gatsbyPrismic.Runtime>;\n\t/**\n\t * Record of plugin options keyed by their repository name.\n\t */\n\tpluginOptionsStore: Record<string, PluginOptions>;\n\t/**\n\t * Configuration for each repository\n\t */\n\trepositoryConfigs: PrismicUnpublishedRepositoryConfigs;\n};\n\nexport enum PrismicContextActionType {\n\tSetActiveRepositoryName = \"SetActiveRepositoryName\",\n\tSetAccessToken = \"SetAccessToken\",\n\n\tSetupRuntime = \"SetupRuntime\",\n\tRegisterDocuments = \"RegisterDocuments\",\n\tImportTypePaths = \"ImportTypePaths\",\n\n\tStartResolving = \"StartResolving\",\n\tResolved = \"Resolved\",\n\n\tStartBootstrapping = \"StartBootstrapping\",\n\tBootstrapped = \"Bootstrapped\",\n\n\tFailed = \"Failed\",\n\tNotAPreview = \"NotAPreview\",\n\tPromptForAccessToken = \"PromptForAccessToken\",\n\n\tGoToIdle = \"GoToIdle\",\n}\n\nexport type PrismicContextAction =\n\t| {\n\t\t\ttype: PrismicContextActionType.SetActiveRepositoryName;\n\t\t\tpayload: { repositoryName: string };\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.SetAccessToken;\n\t\t\tpayload: { repositoryName: string; accessToken: string };\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.SetupRuntime;\n\t\t\tpayload: {\n\t\t\t\trepositoryName: string;\n\t\t\t\trepositoryConfig: PrismicRepositoryConfig;\n\t\t\t\tpluginOptions: PluginOptions;\n\t\t\t};\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.RegisterDocuments;\n\t\t\tpayload: {\n\t\t\t\trepositoryName: string;\n\t\t\t\tdocuments: prismicT.PrismicDocument[];\n\t\t\t};\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.ImportTypePaths;\n\t\t\tpayload: { repositoryName: string; typePathsExport: string };\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.StartResolving;\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.Resolved;\n\t\t\tpayload: { path: string };\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.StartBootstrapping;\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.Bootstrapped;\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.NotAPreview;\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.PromptForAccessToken;\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.Failed;\n\t\t\tpayload: { error: Error };\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.Failed;\n\t\t\tpayload: { error: Error };\n\t  }\n\t| {\n\t\t\ttype: PrismicContextActionType.GoToIdle;\n\t  };\n\nexport const contextReducer = (\n\tstate: PrismicContextState,\n\taction: PrismicContextAction,\n): PrismicContextState => {\n\tswitch (action.type) {\n\t\tcase PrismicContextActionType.SetActiveRepositoryName: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tactiveRepositoryName: action.payload.repositoryName,\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.SetupRuntime: {\n\t\t\tconst runtime = gatsbyPrismic.createRuntime({\n\t\t\t\tlinkResolver: action.payload.repositoryConfig.linkResolver,\n\t\t\t\thtmlSerializer: action.payload.repositoryConfig.htmlSerializer,\n\t\t\t\ttransformFieldName: action.payload.repositoryConfig.transformFieldName,\n\t\t\t\ttypePrefix: action.payload.pluginOptions.typePrefix,\n\t\t\t\timageImgixParams: action.payload.pluginOptions.imageImgixParams,\n\t\t\t\timagePlaceholderImgixParams:\n\t\t\t\t\taction.payload.pluginOptions.imagePlaceholderImgixParams,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\truntimeStore: {\n\t\t\t\t\t...state.runtimeStore,\n\t\t\t\t\t[action.payload.repositoryName]: runtime,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.RegisterDocuments: {\n\t\t\tconst runtime = state.runtimeStore[action.payload.repositoryName];\n\n\t\t\tif (runtime) {\n\t\t\t\truntime.registerDocuments(action.payload.documents);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`A runtime for repository \"${action.payload.repositoryName}\" as not found`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tcase PrismicContextActionType.ImportTypePaths: {\n\t\t\tconst runtime = state.runtimeStore[action.payload.repositoryName];\n\n\t\t\tif (runtime) {\n\t\t\t\truntime.importTypePaths(action.payload.typePathsExport);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`A runtime for repository \"${action.payload.repositoryName}\" as not found`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tcase PrismicContextActionType.SetAccessToken: {\n\t\t\tconst repositoryName = action.payload.repositoryName;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpluginOptionsStore: {\n\t\t\t\t\t...state.pluginOptionsStore,\n\t\t\t\t\t[repositoryName]: {\n\t\t\t\t\t\t...state.pluginOptionsStore[repositoryName],\n\t\t\t\t\t\taccessToken: action.payload.accessToken,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.StartResolving: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpreviewState: PrismicPreviewState.RESOLVING,\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.Resolved: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpreviewState: PrismicPreviewState.RESOLVED,\n\t\t\t\tresolvedPath: action.payload.path,\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.StartBootstrapping: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpreviewState: PrismicPreviewState.BOOTSTRAPPING,\n\t\t\t\tisBootstrapped: false,\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.Bootstrapped: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpreviewState: PrismicPreviewState.ACTIVE,\n\t\t\t\tisBootstrapped: true,\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.Failed: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpreviewState: PrismicPreviewState.FAILED,\n\t\t\t\terror: action.payload.error,\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.NotAPreview: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpreviewState: PrismicPreviewState.NOT_PREVIEW,\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.PromptForAccessToken: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpreviewState: PrismicPreviewState.PROMPT_FOR_ACCESS_TOKEN,\n\t\t\t};\n\t\t}\n\n\t\tcase PrismicContextActionType.GoToIdle: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpreviewState: PrismicPreviewState.IDLE,\n\t\t\t};\n\t\t}\n\t}\n};\n\nconst defaultInitialState: PrismicContextState = {\n\tactiveRepositoryName: undefined,\n\tpreviewState: PrismicPreviewState.IDLE,\n\tisBootstrapped: false,\n\truntimeStore: {},\n\tpluginOptionsStore: {},\n\trepositoryConfigs: [],\n};\n\nconst createInitialState = (\n\trepositoryConfigs = defaultInitialState.repositoryConfigs,\n): PrismicContextState => {\n\tconst pluginOptionsStore =\n\t\ttypeof window === \"undefined\"\n\t\t\t? {}\n\t\t\t: window[WINDOW_PLUGIN_OPTIONS_KEY] || {};\n\tconst repositoryNames = Object.keys(pluginOptionsStore);\n\n\tconst injectedPluginOptionsStore = repositoryNames.reduce(\n\t\t(acc: Record<string, PluginOptions>, repositoryName) => {\n\t\t\tconst persistedAccessTokenCookieName = sprintf(\n\t\t\t\tCOOKIE_ACCESS_TOKEN_NAME,\n\t\t\t\trepositoryName,\n\t\t\t);\n\t\t\tconst persistedAccessToken = cookie.get(persistedAccessTokenCookieName);\n\n\t\t\tacc[repositoryName] = pluginOptionsStore[repositoryName];\n\n\t\t\tif (acc[repositoryName].accessToken == null && persistedAccessToken) {\n\t\t\t\tacc[repositoryName].accessToken = persistedAccessToken;\n\t\t\t}\n\n\t\t\treturn acc;\n\t\t},\n\t\t{},\n\t);\n\n\treturn {\n\t\t...defaultInitialState,\n\t\tpluginOptionsStore: injectedPluginOptionsStore,\n\t\trepositoryConfigs,\n\t};\n};\n\nconst defaultContextValue: PrismicContextValue = [\n\tdefaultInitialState,\n\t() => void 0,\n];\n\nexport const PrismicContext = React.createContext(defaultContextValue);\n\nexport type PrismicProviderProps = {\n\trepositoryConfigs?: PrismicUnpublishedRepositoryConfigs;\n\tchildren?: React.ReactNode;\n};\n\nexport const PrismicPreviewProvider = ({\n\trepositoryConfigs,\n\tchildren,\n}: PrismicProviderProps): JSX.Element => {\n\tconst initialState = createInitialState(repositoryConfigs);\n\tconst reducerTuple = React.useReducer(contextReducer, initialState);\n\n\tif (typeof window !== \"undefined\") {\n\t\twindow[WINDOW_PROVIDER_PRESENCE_KEY] = true;\n\t}\n\n\treturn (\n\t\t<PrismicContext.Provider value={reducerTuple}>\n\t\t\t{children}\n\t\t</PrismicContext.Provider>\n\t);\n};\n","import * as React from \"react\";\n\nimport {\n\tMISSING_PROVIDER_MSG,\n\tWINDOW_PROVIDER_PRESENCE_KEY,\n} from \"./constants\";\nimport {\n\tPrismicContext,\n\tPrismicContextAction,\n\tPrismicContextState,\n} from \"./context\";\n\ntype UsePrismicPreviewContextValue = readonly [\n\tPrismicContextState,\n\tReact.Dispatch<PrismicContextAction>,\n];\n\n/**\n * Returns the global state for Prismic preview sessions.\n */\nexport const usePrismicPreviewContext = (): UsePrismicPreviewContextValue => {\n\tReact.useEffect(() => {\n\t\tif (\n\t\t\tprocess.env.NODE_ENV === \"development\" &&\n\t\t\t!window[WINDOW_PROVIDER_PRESENCE_KEY]\n\t\t) {\n\t\t\tconsole.warn(MISSING_PROVIDER_MSG);\n\t\t}\n\t}, []);\n\n\treturn React.useContext(PrismicContext);\n};\n","import * as React from \"react\";\nimport * as gatsbyPrismic from \"gatsby-source-prismic\";\n\nimport { isPlainObject } from \"./lib/isPlainObject\";\nimport { isProxy } from \"./lib/isProxy\";\n\nimport { UnknownRecord } from \"./types\";\nimport { PrismicPreviewState } from \"./context\";\nimport { usePrismicPreviewContext } from \"./usePrismicPreviewContext\";\n\n/**\n * Recursively finds previewable data and replaces data if a previewed version\n * of it exists in the provided nodes.\n *\n * @param nodes - List of Prismic document nodes.\n *\n * @returns Function that accepts a node or node content to find and replace\n *   previewable content.\n */\nconst findAndReplacePreviewables = (\n\truntime: gatsbyPrismic.Runtime,\n\tnodeOrLeaf: unknown,\n): unknown => {\n\tif (isPlainObject(nodeOrLeaf)) {\n\t\t// If the value is a proxy, we can't reliably replace properties since\n\t\t// property keys could be synthetic. We opt to ignore the object\n\t\t// completely.\n\t\t//\n\t\t// At the time of writing this comment, Proxies are only present in Link\n\t\t// fields. We can safely opt out of merging preview data in this case.\n\t\tif (isProxy(nodeOrLeaf)) {\n\t\t\treturn nodeOrLeaf;\n\t\t}\n\n\t\tconst nodeId = nodeOrLeaf[gatsbyPrismic.PREVIEWABLE_NODE_ID_FIELD] as\n\t\t\t| string\n\t\t\t| undefined;\n\t\tif (nodeId && runtime.hasNode(nodeId)) {\n\t\t\treturn runtime.getNode(nodeId);\n\t\t}\n\n\t\t// We didn't find a previewable field, so continue to iterate through all\n\t\t// properties to find it.\n\t\tconst newNode = {} as typeof nodeOrLeaf;\n\t\tfor (const key in nodeOrLeaf) {\n\t\t\tnewNode[key] = findAndReplacePreviewables(runtime, nodeOrLeaf[key]);\n\t\t}\n\n\t\treturn newNode;\n\t}\n\n\t// Iterate all elements in the node to find the previewable value.\n\tif (Array.isArray(nodeOrLeaf)) {\n\t\treturn (nodeOrLeaf as unknown[]).map((subnode) =>\n\t\t\tfindAndReplacePreviewables(runtime, subnode),\n\t\t);\n\t}\n\n\t// If the node is not an object or array, it cannot be a previewable value.\n\treturn nodeOrLeaf;\n};\n\n/**\n * Takes a static data object and a record of nodes and replaces any instances\n * of those nodes in the static data with the updated version. The replacement\n * is done recursively to ensure nested nodes are replaced.\n *\n * Nodes are considered matches if they have identical\n * `PREVIEWABLE_NODE_ID_FIELD` fields (see constant value in `src/constants.ts`).\n *\n * @param staticData - Static data object in which nodes will be replaced.\n * @param nodes - List of nodes that replace in `staticData`.\n *\n * @returns `staticData` with any matching nodes replaced with nodes in `nodes`.\n */\nconst traverseAndReplace = <TStaticData extends UnknownRecord>(\n\tstaticData: TStaticData,\n\truntime: gatsbyPrismic.Runtime,\n): { data: TStaticData; isPreview: boolean } => {\n\tif (runtime.nodes.length > 0) {\n\t\treturn {\n\t\t\tdata: findAndReplacePreviewables(runtime, staticData) as TStaticData,\n\t\t\tisPreview: true,\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tdata: staticData,\n\t\t\tisPreview: false,\n\t\t};\n\t}\n};\n\nexport type UsePrismicPreviewDataConfig = {\n\t/**\n\t * Determines if merging should be skipped.\n\t */\n\tskip?: boolean;\n};\n\nexport type UsePrismicPreviewDataResult<TStaticData extends UnknownRecord> = {\n\t/**\n\t * Data with previewed content merged if matching documents are found.\n\t */\n\tdata: TStaticData;\n\n\t/**\n\t * Boolean determining if `data` contains previewed data.\n\t */\n\tisPreview: boolean;\n};\n\n/**\n * Merges static Prismic data with previewed data during a Prismic preview\n * session. If the static data finds previewable Prismic data (identified by the\n * `_previewable` field in a Prismic document), this hook will replace its value\n * with one from the preview session.\n *\n * The static data could come from page queries or `useStaticQuery` within a component.\n *\n * @param staticData - Static data from Gatsby's GraphQL layer.\n * @param config - Configuration that determines how the hook merges preview data.\n *\n * @returns An object containing the merged data and a boolean determining if\n *   the merged data contains preview data.\n */\nexport const useMergePrismicPreviewData = <TStaticData extends UnknownRecord>(\n\tstaticData: TStaticData,\n\tconfig: UsePrismicPreviewDataConfig = { skip: false },\n): UsePrismicPreviewDataResult<TStaticData> => {\n\tconst [state] = usePrismicPreviewContext();\n\n\treturn React.useMemo(() => {\n\t\tconst runtime = state.activeRepositoryName\n\t\t\t? state.runtimeStore[state.activeRepositoryName]\n\t\t\t: undefined;\n\n\t\tif (\n\t\t\t!config.skip &&\n\t\t\truntime &&\n\t\t\tstate.previewState === PrismicPreviewState.ACTIVE\n\t\t) {\n\t\t\treturn traverseAndReplace(staticData, runtime);\n\t\t} else {\n\t\t\treturn { data: staticData, isPreview: false };\n\t\t}\n\t}, [staticData, config.skip, state]);\n};\n","import * as React from \"react\";\nimport * as cookie from \"es-cookie\";\n\nimport { sprintf } from \"./lib/sprintf\";\n\nimport { COOKIE_ACCESS_TOKEN_NAME } from \"./constants\";\nimport { PrismicContextActionType } from \"./context\";\nimport { usePrismicPreviewContext } from \"./usePrismicPreviewContext\";\n\nexport type SetAccessTokenFn = (\n\taccessToken: string,\n\tremember?: boolean,\n) => void;\n\ntype UsePrismicPreviewAccessTokenActions = {\n\tset: SetAccessTokenFn;\n\tremoveCookie(): void;\n};\n\n/**\n * React hook that reads and sets a Prismic access token for a repository. This\n * hook can be used for multiple repositories by using it multiple times.\n *\n * @param repositoryName - Name of the repository.\n */\nexport const usePrismicPreviewAccessToken = (\n\trepositoryName?: string,\n): readonly [\n\taccessToken: string | undefined,\n\tactions: UsePrismicPreviewAccessTokenActions,\n] => {\n\tconst [contextState, contextDispatch] = usePrismicPreviewContext();\n\n\tconst cookieName = repositoryName\n\t\t? sprintf(COOKIE_ACCESS_TOKEN_NAME, repositoryName)\n\t\t: undefined;\n\n\t/**\n\t * Sets an access token for the repository and, by default, stores it in a\n\t * cookie for future preview sessions. If a cookie is not stored, the access\n\t * token is available only for the current preview session.\n\t *\n\t * @param accessToken - Access token to set for the repository.\n\t * @param remember - Determines if the access token should be stored for\n\t *   future preview sessions.\n\t */\n\tconst setAccessToken = React.useCallback(\n\t\t(accessToken: string, remember = true as boolean): void => {\n\t\t\tif (!repositoryName || !cookieName) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"A repository name must be provided to usePrismicPreviewAccessToken before using the set function.\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcontextDispatch({\n\t\t\t\ttype: PrismicContextActionType.SetAccessToken,\n\t\t\t\tpayload: { repositoryName, accessToken },\n\t\t\t});\n\n\t\t\tif (remember) {\n\t\t\t\tcookie.set(cookieName, accessToken);\n\t\t\t}\n\t\t},\n\t\t[cookieName, contextDispatch, repositoryName],\n\t);\n\n\t/**\n\t * Removes the stored access token, if set.\n\t */\n\tconst removeAccessTokenCookie = React.useCallback(() => {\n\t\tif (!cookieName) {\n\t\t\tthrow new Error(\n\t\t\t\t\"A repository name must be provided to usePrismicPreviewAccessToken before using the removeCookie function.\",\n\t\t\t);\n\t\t}\n\n\t\tcookie.remove(cookieName);\n\t}, [cookieName]);\n\n\treturn React.useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\trepositoryName\n\t\t\t\t\t? contextState.pluginOptionsStore[repositoryName]?.accessToken\n\t\t\t\t\t: undefined,\n\t\t\t\t{\n\t\t\t\t\tset: setAccessToken,\n\t\t\t\t\tremoveCookie: removeAccessTokenCookie,\n\t\t\t\t},\n\t\t\t] as const,\n\t\t[\n\t\t\trepositoryName,\n\t\t\tcontextState.pluginOptionsStore,\n\t\t\tsetAccessToken,\n\t\t\tremoveAccessTokenCookie,\n\t\t],\n\t);\n};\n","import * as O from \"fp-ts/Option\";\n\nconst extractFirstSubdomain = (host: string): O.Option<string> =>\n\tO.fromNullable(host.split(\".\")[0]);\n\nconst parseObjectRef = (previewRef: string): O.Option<string> => {\n\ttry {\n\t\tconst parsed = JSON.parse(previewRef);\n\t\tconst keys = Object.keys(parsed);\n\t\tconst domainKey = keys.find((key) => /\\.prismic\\.io$/.test(key));\n\n\t\treturn domainKey ? extractFirstSubdomain(domainKey) : O.none;\n\t} catch {\n\t\treturn O.none;\n\t}\n};\n\nconst parseURLRef = (previewRef: string): O.Option<string> => {\n\ttry {\n\t\tconst url = new URL(previewRef);\n\n\t\treturn extractFirstSubdomain(url.host);\n\t} catch {\n\t\treturn O.none;\n\t}\n};\n\nexport const extractPreviewRefRepositoryName = (\n\tpreviewRef: string,\n): O.Option<string> => {\n\tconst fromObjectRef = parseObjectRef(previewRef);\n\tif (O.isSome(fromObjectRef)) {\n\t\treturn fromObjectRef;\n\t} else {\n\t\treturn parseURLRef(previewRef);\n\t}\n};\n","import { TYPE_PATHS_BASENAME_TEMPLATE } from \"../constants\";\nimport { sprintf } from \"./sprintf\";\n\nexport interface BuildTypePathsStoreFilenameEnv {\n\trepositoryName: string;\n}\n\nexport const buildTypePathsStoreFilename = (repositoryName: string): string => {\n\treturn `${sprintf(TYPE_PATHS_BASENAME_TEMPLATE, repositoryName)}.json`;\n};\n","import * as gatsby from \"gatsby\";\nimport * as E from \"fp-ts/Either\";\n\nimport { FetchLike } from \"../types\";\n\nimport { buildTypePathsStoreFilename } from \"./buildTypePathsStoreFilename\";\n\ntype FetchTypePathsConfig = {\n\trepositoryName: string;\n\tfetch?: FetchLike;\n};\n\nexport const fetchTypePaths = async (\n\tconfig: FetchTypePathsConfig,\n): Promise<E.Either<Error, string>> => {\n\tconst filename = buildTypePathsStoreFilename(config.repositoryName);\n\tconst url = gatsby.withAssetPrefix(`/static/${filename}`);\n\tconst fetchFn = config.fetch || globalThis.fetch;\n\n\ttry {\n\t\tconst res = await fetchFn(url, {\n\t\t\t// We opt out of the cache to ensure we always fetch the latest type paths.\n\t\t\t// Since the URL to the type paths JSON file is always the same (a hashed\n\t\t\t// version of the repository name), some servers may not properly cache\n\t\t\t// bust the resource.\n\t\t\t//\n\t\t\t// Type paths are only fetched at bootstrap so the additional network time\n\t\t\t// this imposes should be minimal.\n\t\t\tcache: \"no-cache\",\n\t\t});\n\t\tconst text = await res.text();\n\n\t\treturn E.right(text);\n\t} catch (error) {\n\t\treturn E.left(error as Error);\n\t}\n};\n","import * as React from \"react\";\nimport * as prismic from \"@prismicio/client\";\nimport * as prismicT from \"@prismicio/types\";\nimport * as E from \"fp-ts/Either\";\nimport * as O from \"fp-ts/Option\";\nimport * as cookie from \"es-cookie\";\n\nimport { extractPreviewRefRepositoryName } from \"./lib/extractPreviewRefRepositoryName\";\nimport { fetchTypePaths } from \"./lib/fetchTypePaths\";\nimport { sprintf } from \"./lib/sprintf\";\n\nimport { FetchLike, PrismicRepositoryConfigs } from \"./types\";\nimport {\n\tMISSING_PLUGIN_OPTIONS_MSG,\n\tMISSING_REPOSITORY_CONFIG_MSG,\n} from \"./constants\";\nimport {\n\tPrismicContextActionType,\n\tPrismicContextState,\n\tPrismicPreviewState,\n} from \"./context\";\nimport { usePrismicPreviewContext } from \"./usePrismicPreviewContext\";\n\nexport type UsePrismicPreviewBootstrapConfig = {\n\tfetch?: FetchLike;\n};\n\nexport type UsePrismicPreviewBootstrapFn = () => Promise<void>;\n\n/**\n * React hook that bootstraps a Prismic preview session. When the returned\n * bootstrap function is called, the preiew session will be scoped to this\n * hook's Prismic repository. All documents from the repository will be fetched\n * using the preview session's documents.\n *\n * @param repositoryConfigs - Configuration that determines how the bootstrap\n *   function runs.\n */\nexport const usePrismicPreviewBootstrap = (\n\trepositoryConfigs: PrismicRepositoryConfigs = [],\n\tconfig: UsePrismicPreviewBootstrapConfig = {},\n): UsePrismicPreviewBootstrapFn => {\n\tconst [contextState, contextDispatch] = usePrismicPreviewContext();\n\n\t// A ref to the latest contextState is setup specifically for getTypePath\n\t// which is populated during the program's runtime. Since\n\t// contextState.typePaths is empty at all times during the program's run due\n\t// to closures, we need to opt out of the closure and use a ref.\n\t//\n\t// If you have a better idea how to handle this, please share!\n\tconst contextStateRef = React.useRef<PrismicContextState>(contextState);\n\n\t// We need to update the ref anytime contextState changes to ensure lazy\n\t// functions get the latest data.\n\tReact.useEffect(() => {\n\t\tcontextStateRef.current = contextState;\n\t}, [contextState]);\n\n\treturn React.useCallback(async (): Promise<void> => {\n\t\tif (\n\t\t\t(contextStateRef.current.previewState !== PrismicPreviewState.IDLE &&\n\t\t\t\tcontextStateRef.current.previewState !==\n\t\t\t\t\tPrismicPreviewState.RESOLVED) ||\n\t\t\tcontextStateRef.current.isBootstrapped\n\t\t) {\n\t\t\t// No op. Bootstrapping should only happen once.\n\t\t\treturn;\n\t\t}\n\n\t\tconst previewRef = cookie.get(prismic.cookie.preview);\n\t\tconst repositoryName = previewRef\n\t\t\t? extractPreviewRefRepositoryName(previewRef)\n\t\t\t: O.none;\n\n\t\tif (O.isNone(repositoryName)) {\n\t\t\treturn contextDispatch({\n\t\t\t\ttype: PrismicContextActionType.NotAPreview,\n\t\t\t});\n\t\t}\n\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.SetActiveRepositoryName,\n\t\t\tpayload: { repositoryName: repositoryName.value },\n\t\t});\n\n\t\t// TODO: Deeply merge repository configs\n\t\tconst resolvedRepositoryConfigs = [\n\t\t\t...repositoryConfigs,\n\t\t\t...contextState.repositoryConfigs,\n\t\t];\n\t\tconst repositoryConfig = resolvedRepositoryConfigs.find(\n\t\t\t(config) => config.repositoryName === repositoryName.value,\n\t\t);\n\t\tif (!repositoryConfig) {\n\t\t\treturn contextDispatch({\n\t\t\t\ttype: PrismicContextActionType.Failed,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: new Error(\n\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\tMISSING_REPOSITORY_CONFIG_MSG,\n\t\t\t\t\t\t\trepositoryName.value,\n\t\t\t\t\t\t\t\"withPrismicPreview and withPrismicUnpublishedPreview\",\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst repositoryPluginOptions =\n\t\t\tcontextState.pluginOptionsStore[repositoryName.value];\n\t\tif (!repositoryPluginOptions) {\n\t\t\treturn contextDispatch({\n\t\t\t\ttype: PrismicContextActionType.Failed,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: new Error(\n\t\t\t\t\t\tsprintf(MISSING_PLUGIN_OPTIONS_MSG, repositoryName.value),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.SetupRuntime,\n\t\t\tpayload: {\n\t\t\t\trepositoryName: repositoryName.value,\n\t\t\t\trepositoryConfig,\n\t\t\t\tpluginOptions: repositoryPluginOptions,\n\t\t\t},\n\t\t});\n\n\t\t// Begin bootstrap phase.\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.StartBootstrapping,\n\t\t});\n\n\t\tconst typePaths = await fetchTypePaths({\n\t\t\trepositoryName: repositoryName.value,\n\t\t\tfetch: config.fetch,\n\t\t});\n\t\tif (E.isLeft(typePaths)) {\n\t\t\treturn contextDispatch({\n\t\t\t\ttype: PrismicContextActionType.Failed,\n\t\t\t\tpayload: { error: typePaths.left },\n\t\t\t});\n\t\t}\n\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.ImportTypePaths,\n\t\t\tpayload: {\n\t\t\t\trepositoryName: repositoryName.value,\n\t\t\t\ttypePathsExport: typePaths.right,\n\t\t\t},\n\t\t});\n\n\t\tconst endpoint =\n\t\t\trepositoryPluginOptions.apiEndpoint ??\n\t\t\tprismic.getEndpoint(repositoryName.value);\n\t\tconst client = prismic.createClient(endpoint, {\n\t\t\taccessToken: repositoryPluginOptions.accessToken,\n\t\t\troutes: repositoryPluginOptions.routes,\n\t\t\tdefaultParams: {\n\t\t\t\tlang: repositoryPluginOptions.lang,\n\t\t\t\tfetchLinks: repositoryPluginOptions.fetchLinks,\n\t\t\t\tgraphQuery: repositoryPluginOptions.graphQuery,\n\t\t\t\tpageSize: repositoryPluginOptions.pageSize,\n\t\t\t},\n\t\t\tfetch: config.fetch,\n\t\t});\n\t\tclient.enableAutoPreviews();\n\n\t\tlet allDocuments: prismicT.PrismicDocument[];\n\t\ttry {\n\t\t\tallDocuments = await client.dangerouslyGetAll();\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror instanceof prismic.ForbiddenError &&\n\t\t\t\trepositoryPluginOptions.promptForAccessToken\n\t\t\t) {\n\t\t\t\treturn contextDispatch({\n\t\t\t\t\ttype: PrismicContextActionType.PromptForAccessToken,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn contextDispatch({\n\t\t\t\t\ttype: PrismicContextActionType.Failed,\n\t\t\t\t\tpayload: { error: error as Error },\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.RegisterDocuments,\n\t\t\tpayload: {\n\t\t\t\trepositoryName: repositoryName.value,\n\t\t\t\tdocuments: allDocuments,\n\t\t\t},\n\t\t});\n\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.Bootstrapped,\n\t\t});\n\t}, [\n\t\trepositoryConfigs,\n\t\tcontextState.repositoryConfigs,\n\t\tcontextState.pluginOptionsStore,\n\t\tcontextDispatch,\n\t\tconfig.fetch,\n\t]);\n};\n","import * as O from \"fp-ts/Option\";\n\nexport const getURLSearchParam = (key: string): O.Option<string> => {\n\tconst params = new URLSearchParams(window.location.search);\n\n\treturn O.fromNullable(params.get(key));\n};\n","import * as React from \"react\";\nimport * as prismic from \"@prismicio/client\";\nimport * as O from \"fp-ts/Option\";\nimport * as cookie from \"es-cookie\";\n\nimport { extractPreviewRefRepositoryName } from \"./lib/extractPreviewRefRepositoryName\";\nimport { sprintf } from \"./lib/sprintf\";\n\nimport { FetchLike, PrismicRepositoryConfigs } from \"./types\";\nimport {\n\tMISSING_PLUGIN_OPTIONS_MSG,\n\tMISSING_REPOSITORY_CONFIG_MSG,\n} from \"./constants\";\nimport {\n\tPrismicContextActionType,\n\tPrismicContextState,\n\tPrismicPreviewState,\n} from \"./context\";\nimport { usePrismicPreviewContext } from \"./usePrismicPreviewContext\";\nimport { getURLSearchParam } from \"./lib/getURLSearchParam\";\n\nexport type UsePrismicPreviewResolverConfig = {\n\tfetch?: FetchLike;\n};\n\nexport type UsePrismicPreviewResolverFn = () => Promise<void>;\n\nexport const usePrismicPreviewResolver = (\n\trepositoryConfigs: PrismicRepositoryConfigs = [],\n\tconfig: UsePrismicPreviewResolverConfig = {},\n): UsePrismicPreviewResolverFn => {\n\tconst [contextState, contextDispatch] = usePrismicPreviewContext();\n\n\tconst contextStateRef = React.useRef<PrismicContextState>(contextState);\n\n\t// We need to update the ref anytime contextState changes to ensure lazy\n\t// functions get the latest data.\n\tReact.useEffect(() => {\n\t\tcontextStateRef.current = contextState;\n\t}, [contextState]);\n\n\treturn React.useCallback(async (): Promise<void> => {\n\t\tif (contextStateRef.current.previewState !== PrismicPreviewState.IDLE) {\n\t\t\t// No op. Resolving should only happen at IDLE.\n\t\t\treturn;\n\t\t}\n\n\t\tconst previewRef = cookie.get(prismic.cookie.preview);\n\t\tconst documentId = getURLSearchParam(\"documentId\");\n\t\tconst repositoryName = previewRef\n\t\t\t? extractPreviewRefRepositoryName(previewRef)\n\t\t\t: O.none;\n\n\t\tif (O.isNone(documentId) || O.isNone(repositoryName)) {\n\t\t\treturn contextDispatch({\n\t\t\t\ttype: PrismicContextActionType.NotAPreview,\n\t\t\t});\n\t\t}\n\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.SetActiveRepositoryName,\n\t\t\tpayload: { repositoryName: repositoryName.value },\n\t\t});\n\n\t\t// TODO: Deeply merge repository configs\n\t\tconst resolvedRepositoryConfigs = [\n\t\t\t...repositoryConfigs,\n\t\t\t...contextState.repositoryConfigs,\n\t\t];\n\t\tconst repositoryConfig = resolvedRepositoryConfigs.find(\n\t\t\t(config) => config.repositoryName === repositoryName.value,\n\t\t);\n\t\tif (!repositoryConfig) {\n\t\t\treturn contextDispatch({\n\t\t\t\ttype: PrismicContextActionType.Failed,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: new Error(\n\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\tMISSING_REPOSITORY_CONFIG_MSG,\n\t\t\t\t\t\t\trepositoryName.value,\n\t\t\t\t\t\t\t\"withPrismicPreview and withPrismicUnpublishedPreview\",\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst repositoryPluginOptions =\n\t\t\tcontextState.pluginOptionsStore[repositoryName.value];\n\t\tif (!repositoryPluginOptions) {\n\t\t\treturn contextDispatch({\n\t\t\t\ttype: PrismicContextActionType.Failed,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: new Error(\n\t\t\t\t\t\tsprintf(MISSING_PLUGIN_OPTIONS_MSG, repositoryName.value),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\t// Begin resolving stage.\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.StartResolving,\n\t\t});\n\n\t\tconst endpoint =\n\t\t\trepositoryPluginOptions.apiEndpoint ??\n\t\t\tprismic.getEndpoint(repositoryName.value);\n\t\tconst client = prismic.createClient(endpoint, {\n\t\t\taccessToken: repositoryPluginOptions.accessToken,\n\t\t\troutes: repositoryPluginOptions.routes,\n\t\t\tdefaultParams: {\n\t\t\t\tlang: repositoryPluginOptions.lang,\n\t\t\t\tfetchLinks: repositoryPluginOptions.fetchLinks,\n\t\t\t\tgraphQuery: repositoryPluginOptions.graphQuery,\n\t\t\t},\n\t\t\tfetch: config.fetch,\n\t\t});\n\t\tclient.enableAutoPreviews();\n\n\t\tlet path: string;\n\t\ttry {\n\t\t\tpath = await client.resolvePreviewURL({\n\t\t\t\tlinkResolver: repositoryConfig.linkResolver,\n\t\t\t\tdefaultURL: \"/\",\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror instanceof prismic.ForbiddenError &&\n\t\t\t\trepositoryPluginOptions.promptForAccessToken\n\t\t\t) {\n\t\t\t\treturn contextDispatch({\n\t\t\t\t\ttype: PrismicContextActionType.PromptForAccessToken,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn contextDispatch({\n\t\t\t\t\ttype: PrismicContextActionType.Failed,\n\t\t\t\t\tpayload: { error: error as Error },\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tcontextDispatch({\n\t\t\ttype: PrismicContextActionType.Resolved,\n\t\t\tpayload: { path },\n\t\t});\n\t}, [\n\t\tcontextDispatch,\n\t\tcontextState.pluginOptionsStore,\n\t\tcontextState.repositoryConfigs,\n\t\trepositoryConfigs,\n\t\tconfig.fetch,\n\t]);\n};\n","import * as React from \"react\";\n\n/**\n * Returns a component's display name. If none is provided, \"Component\" is returned.\n *\n * @param WrappedComponent - Component from which to get the display name.\n *\n * @returns `WrappedComponent`'s display name.\n */\nexport const getComponentDisplayName = <TProps>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): string =>\n\tWrappedComponent.displayName || WrappedComponent.name || \"Component\";\n","import * as prismic from \"@prismicio/client\";\n\nexport const userFriendlyError = (error: Error): Error => {\n\tif (error instanceof prismic.ForbiddenError) {\n\t\treturn new Error(\"Unauthorized access\");\n\t} else {\n\t\treturn error;\n\t}\n};\n","import * as React from \"react\";\nimport root from \"react-shadow\";\n\nimport styles from \"../styles.css\";\n\ntype RootProps = {\n\tchildren?: React.ReactNode;\n};\n\nexport const Root = ({ children }: RootProps): JSX.Element => {\n\treturn (\n\t\t<root.div>\n\t\t\t<div className=\"root\">{children}</div>\n\t\t\t<style type=\"text/css\">{styles}</style>\n\t\t</root.div>\n\t);\n};\n","import * as React from \"react\";\nimport { DialogContent, DialogOverlay } from \"@reach/dialog\";\nimport clsx from \"clsx\";\n\nimport { Root } from \"./Root\";\n\nconst CloseSVG = (props: React.SVGProps<SVGSVGElement>): JSX.Element => (\n\t<svg viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n\t\t<path\n\t\t\td=\"m297.612899 76.2097046.094208.0831886 7.292893 7.2921068 7.292893-7.2921068c.390525-.3905243 1.023689-.3905243 1.414214 0 .360484.360484.388213.927715.083188 1.3200062l-.083188.0942074-7.292107 7.2928932 7.292107 7.2928932c.390524.3905243.390524 1.0236893 0 1.4142136-.360484.3604839-.927715.3882135-1.320006.0831886l-.094208-.0831886-7.292893-7.2921068-7.292893 7.2921068c-.390525.3905243-1.023689.3905243-1.414214 0-.360484-.360484-.388213-.927715-.083188-1.3200062l.083188-.0942074 7.292107-7.2928932-7.292107-7.2928932c-.390524-.3905243-.390524-1.0236893 0-1.4142136.360484-.3604839.927715-.3882135 1.320006-.0831886z\"\n\t\t\tfill=\"currentColor\"\n\t\t\ttransform=\"translate(-296 -76)\"\n\t\t/>\n\t</svg>\n);\n\ntype PrismicLogoProps = {\n\tfillWhite?: boolean;\n} & React.SVGProps<SVGSVGElement>;\n\nconst PrismicLogo = ({\n\tfillWhite,\n\t...props\n}: PrismicLogoProps): JSX.Element => (\n\t<svg viewBox=\"0 0 45 45\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n\t\t<g fill=\"none\">\n\t\t\t<path\n\t\t\t\td=\"M39.19 1.534a10.38 10.38 0 014.292 4.341C44.472 7.747 45 9.605 45 14.723v8.99c0 .116-.07.22-.176.265a.283.283 0 01-.31-.062v-.001l-3.358-3.395a1.443 1.443 0 01-.416-1.016V15.35c0-3.84-.396-5.232-1.138-6.636a7.785 7.785 0 00-3.22-3.255c-1.374-.744-2.737-1.143-6.444-1.15l-5.551-.001a.285.285 0 01-.262-.178.289.289 0 01.062-.312L27.545.42C27.81.151 28.172 0 28.549 0h1.889c5.063 0 6.9.533 8.751 1.534zM32.22 7.178c3.137 0 5.68 2.572 5.68 5.743v3.636a.287.287 0 01-.174.262.282.282 0 01-.307-.056l-4.58-4.425a2.83 2.83 0 00-1.035-.668 2.806 2.806 0 00-1.004-.185H17.284a.285.285 0 01-.262-.177.289.289 0 01.061-.313l3.364-3.397c.265-.268.626-.42 1.003-.42z\"\n\t\t\t\tfill={fillWhite ? \"white\" : \"#e55638\"}\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M41.182 24.185l3.397 3.359c.269.266.421.628.421 1.005v1.89c0 5.062-.533 6.899-1.535 8.75a10.38 10.38 0 01-4.34 4.295c-1.873.988-3.73 1.516-8.85 1.516h-8.989a.288.288 0 01-.264-.176.281.281 0 01.062-.309v.002l3.396-3.36a1.443 1.443 0 011.015-.416h4.155c3.84 0 5.231-.395 6.635-1.139a7.786 7.786 0 003.257-3.22c.75-1.388 1.15-2.765 1.15-6.564v-5.433c.001-.114.071-.217.178-.26a.29.29 0 01.312.06zm-7.177-7.102l3.397 3.363c.269.266.42.627.42 1.005v10.772c0 3.137-2.571 5.68-5.743 5.68h-3.636a.288.288 0 01-.263-.172.281.281 0 01.056-.307v-.002l4.425-4.58c.307-.303.53-.657.669-1.036.122-.32.184-.66.184-1.003v-13.52c0-.114.07-.217.178-.261a.29.29 0 01.313.061z\"\n\t\t\t\tfill={fillWhite ? \"white\" : \"#f4c942\"}\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M.484 21.083l3.361 3.396c.266.269.417.635.417 1.016v4.155c0 3.84.394 5.232 1.138 6.636a7.785 7.785 0 003.22 3.256c1.388.751 2.766 1.15 6.563 1.15h5.431a.289.289 0 01.202.49l-3.36 3.397a1.41 1.41 0 01-1.003.421h-1.89c-5.063 0-6.899-.533-8.75-1.534a10.38 10.38 0 01-4.295-4.342C.538 37.271.01 35.432 0 30.43v-9.143c0-.116.07-.22.175-.264a.283.283 0 01.31.06zm7.097 7.153h-.002l4.582 4.426c.302.306.658.528 1.035.667.31.12.65.185 1.004.185h13.517c.115 0 .218.071.262.178.043.107.019.23-.062.312l-3.362 3.398c-.266.268-.628.42-1.003.42H12.779a5.66 5.66 0 01-4.018-1.685A5.763 5.763 0 017.1 32.078v-3.635c0-.115.069-.218.173-.263a.283.283 0 01.308.056z\"\n\t\t\t\tfill={fillWhite ? \"white\" : \"#7b8fea\"}\n\t\t\t/>\n\t\t\t<path\n\t\t\t\td=\"M16.557 7.1c.115 0 .218.068.263.173a.281.281 0 01-.056.307l-4.426 4.582a2.814 2.814 0 00-.668 1.035c-.123.32-.185.66-.185 1.003V27.72c-.001.114-.071.216-.178.26s-.23.02-.312-.06l-3.397-3.363a1.412 1.412 0 01-.42-1.004V12.78c0-3.137 2.571-5.68 5.743-5.68zM23.714 0c.116 0 .22.07.264.176a.281.281 0 01-.062.309L20.52 3.844c-.27.266-.634.416-1.015.416H15.35c-3.84 0-5.232.395-6.637 1.139a7.785 7.785 0 00-3.256 3.22c-.743 1.373-1.142 2.736-1.15 6.444v5.552c-.001.114-.071.217-.178.26a.29.29 0 01-.313-.06L.422 17.458A1.411 1.411 0 010 16.452v-1.89C0 9.5.533 7.663 1.535 5.812a10.38 10.38 0 014.34-4.295C7.73.537 9.568.011 14.57 0z\"\n\t\t\t\tfill={fillWhite ? \"white\" : \"#d97ee8\"}\n\t\t\t/>\n\t\t</g>\n\t</svg>\n);\n\nexport type ModalProps = {\n\tchildren?: React.ReactNode;\n\tvariant?: \"base\" | \"red\";\n\trepositoryName: string;\n\tonDismiss: () => void;\n\tisOpen: boolean;\n\t[\"aria-label\"]: string;\n};\n\nexport const Modal = ({\n\tvariant = \"base\",\n\trepositoryName,\n\tonDismiss,\n\tisOpen,\n\tchildren,\n\t\"aria-label\": ariaLabel,\n}: ModalProps): JSX.Element => {\n\treturn (\n\t\t<DialogOverlay\n\t\t\tisOpen={isOpen}\n\t\t\tonDismiss={onDismiss}\n\t\t\tdangerouslyBypassFocusLock={true}\n\t\t>\n\t\t\t<DialogContent aria-label={ariaLabel}>\n\t\t\t\t<Root>\n\t\t\t\t\t<div className=\"z-max bg-black bg-opacity-60 fixed inset-0 overflow-auto\">\n\t\t\t\t\t\t<div className=\"w-full max-w-34rem mx-auto mt-20vh px-4\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\"rounded-lg shadow-lg px-7 py-8 relative sm:px-10\",\n\t\t\t\t\t\t\t\t\tvariant === \"base\" && \"bg-white text-slate-30\",\n\t\t\t\t\t\t\t\t\tvariant === \"red\" && \"bg-red-40 text-white\",\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tdata-gatsby-plugin-prismic-previews-repository-name={\n\t\t\t\t\t\t\t\t\trepositoryName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className=\"grid gap-7\">\n\t\t\t\t\t\t\t\t\t<PrismicLogo\n\t\t\t\t\t\t\t\t\t\tfillWhite={variant === \"red\"}\n\t\t\t\t\t\t\t\t\t\tclassName=\"block mx-auto w-11 h-11\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<div>{children}</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\t\t\"absolute top-5 right-5 transition  sm:top-6 sm:right-6 p-2 -m-2\",\n\t\t\t\t\t\t\t\t\t\tvariant === \"base\" &&\n\t\t\t\t\t\t\t\t\t\t\t\"text-slate-90 hover:text-slate-60 focus:text-slate-60\",\n\t\t\t\t\t\t\t\t\t\tvariant === \"red\" &&\n\t\t\t\t\t\t\t\t\t\t\t\"text-red-80 hover:text-white focus:text-white\",\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\tonClick={onDismiss}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span className=\"sr-only\">Close modal</span>\n\t\t\t\t\t\t\t\t\t<CloseSVG className=\"w-5 h-5\" />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Root>\n\t\t\t</DialogContent>\n\t\t</DialogOverlay>\n\t);\n};\n","import * as React from \"react\";\nimport clsx from \"clsx\";\n\ntype ButtonProps = {\n\tvariant: \"purple\" | \"white\" | \"whiteOutline\";\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const Button = ({\n\tclassName,\n\tvariant,\n\t...props\n}: ButtonProps): JSX.Element => (\n\t<button\n\t\t{...props}\n\t\tclassName={clsx(\n\t\t\t\"py-4 px-5 text-center rounded min-w-7.5rem border\",\n\t\t\tvariant === \"purple\" &&\n\t\t\t\t\"bg-purple-50 text-white border-purple-50 transition hover:bg-purple-40 focus:bg-purple-40 hover:border-purple-40 focus:borer-purple-40\",\n\t\t\tvariant === \"white\" &&\n\t\t\t\t\"bg-white border-slate-90 text-slate-60 hover:border-slate-70 focus:border-slate-70 hover:text-slate-30 focus:text-slate-30 transition\",\n\t\t\tvariant === \"whiteOutline\" &&\n\t\t\t\t\"bg-transparent border-white text-white hover:bg-white hover:bg-opacity-10 focus:bg-white focus:bg-opacity-10 transition\",\n\t\t\tclassName,\n\t\t)}\n\t/>\n);\n","import * as React from \"react\";\nimport { PolymorphicPropsWithoutRef } from \"react-polymorphic-types\";\nimport clsx from \"clsx\";\n\nconst defaultElement = \"div\";\n\nconst variants = {\n\t\"sans-12\": {\n\t\tfontFamilyClassName: \"font-sans\",\n\t\tfontSizeClassName: \"text-12\",\n\t\tleadingClassName: \"leading-1_5\",\n\t\ttrackingClassName: undefined,\n\t},\n\t\"sans-12-14\": {\n\t\tfontFamilyClassName: \"font-sans\",\n\t\tfontSizeClassName: \"text-12 sm:text-14\",\n\t\tleadingClassName: \"leading-1_5\",\n\t\ttrackingClassName: undefined,\n\t},\n\t\"sans-14\": {\n\t\tfontFamilyClassName: \"font-sans\",\n\t\tfontSizeClassName: \"text-14\",\n\t\tleadingClassName: \"leading-1_1\",\n\t\ttrackingClassName: undefined,\n\t},\n\t\"sans-16\": {\n\t\tfontFamilyClassName: \"font-sans\",\n\t\tfontSizeClassName: \"text-16\",\n\t\tleadingClassName: \"leading-1_1\",\n\t\ttrackingClassName: undefined,\n\t},\n\t\"sans-24\": {\n\t\tfontFamilyClassName: \"font-sans\",\n\t\tfontSizeClassName: \"text-24\",\n\t\tleadingClassName: \"leading-1_1\",\n\t\ttrackingClassName: \"tracking-tight\",\n\t},\n\t\"mono-20\": {\n\t\tfontFamilyClassName: \"font-mono\",\n\t\tfontSizeClassName: \"text-20\",\n\t\tleadingClassName: \"leading-1_4\",\n\t\ttrackingClassName: undefined,\n\t},\n} as const;\n\ntype TextOwnProps = {\n\tvariant: keyof typeof variants;\n\tfontFamilyClassName?: string;\n\tfontSizeClassName?: string;\n\tleadingClassName?: string;\n\ttrackingClassName?: string;\n\tchildren?: React.ReactNode;\n};\n\nexport type TextProps<T extends React.ElementType = typeof defaultElement> =\n\tPolymorphicPropsWithoutRef<TextOwnProps, T>;\n\nexport const Text = <T extends React.ElementType = typeof defaultElement>({\n\tas,\n\tvariant: variantName,\n\tfontFamilyClassName,\n\tfontSizeClassName,\n\tleadingClassName,\n\ttrackingClassName,\n\tclassName,\n\t...restProps\n}: TextProps<T>): JSX.Element => {\n\tconst Element: React.ElementType = as ?? defaultElement;\n\tconst variant = variants[variantName];\n\n\treturn (\n\t\t<Element\n\t\t\t{...restProps}\n\t\t\tclassName={clsx(\n\t\t\t\tfontFamilyClassName ?? variant.fontFamilyClassName,\n\t\t\t\tfontSizeClassName ?? variant.fontSizeClassName,\n\t\t\t\tleadingClassName ?? variant.leadingClassName,\n\t\t\t\ttrackingClassName ?? variant.trackingClassName,\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t/>\n\t);\n};\n","import * as React from \"react\";\nimport clsx from \"clsx\";\n\nimport { SetAccessTokenFn } from \"../usePrismicPreviewAccessToken\";\n\nimport { Modal, ModalProps } from \"./Modal\";\nimport { Button } from \"./Button\";\nimport { Text } from \"./Text\";\n\nconst PRISMIC_DOCS_GENERATING_AN_ACCESS_TOKEN =\n\t\"https://user-guides.prismic.io/en/articles/1036153-generating-an-access-token\";\n\ntype ModalAccessTokenProps = {\n\tstate?: \"IDLE\" | \"INCORRECT\";\n\tinitialAccessToken?: string;\n\tsetAccessToken: SetAccessTokenFn;\n\tafterSubmit?: () => void;\n} & Pick<ModalProps, \"repositoryName\" | \"isOpen\" | \"onDismiss\">;\n\nexport const ModalAccessToken = ({\n\trepositoryName,\n\tstate = \"IDLE\",\n\tinitialAccessToken = \"\",\n\tafterSubmit,\n\tsetAccessToken,\n\tisOpen,\n\tonDismiss,\n}: ModalAccessTokenProps): JSX.Element => {\n\tconst [ephemeralAccessToken, setEphemeralAccessToken] =\n\t\tReact.useState(initialAccessToken);\n\n\tReact.useEffect(() => {\n\t\tsetEphemeralAccessToken(initialAccessToken);\n\t}, [initialAccessToken]);\n\n\tconst onAccessTokenChange = (\n\t\tevent: React.FormEvent<HTMLInputElement>,\n\t): void => setEphemeralAccessToken(event.currentTarget.value);\n\n\tconst onSubmit = (event: React.FormEvent) => {\n\t\tevent.preventDefault();\n\t\tsetAccessToken(ephemeralAccessToken);\n\n\t\tif (afterSubmit) {\n\t\t\tafterSubmit();\n\t\t}\n\t};\n\n\treturn (\n\t\t<Modal\n\t\t\trepositoryName={repositoryName}\n\t\t\tonDismiss={onDismiss}\n\t\t\tisOpen={isOpen}\n\t\t\taria-label={`Prismic access token for ${repositoryName}`}\n\t\t>\n\t\t\t<div className=\"grid gap-6 sm:gap-7\">\n\t\t\t\t<div className=\"grid gap-5\">\n\t\t\t\t\t<Text\n\t\t\t\t\t\tvariant=\"sans-24\"\n\t\t\t\t\t\tclassName=\"text-slate-10 text-center font-semibold\"\n\t\t\t\t\t>\n\t\t\t\t\t\tEnter your Prismic <br className=\"sm:hidden\" />\n\t\t\t\t\t\taccess token\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Text variant=\"sans-12-14\" className=\"text-center\">\n\t\t\t\t\t\tAn access token is required to view this preview.\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tRepository Name:{\" \"}\n\t\t\t\t\t\t<strong className=\"font-medium text-slate-10\">\n\t\t\t\t\t\t\t{repositoryName}\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t</Text>\n\t\t\t\t</div>\n\n\t\t\t\t<form onSubmit={onSubmit} className=\"grid gap-5\">\n\t\t\t\t\t<label className=\"grid gap-3\">\n\t\t\t\t\t\t<span className=\"sr-only\">Access token</span>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"access-token\"\n\t\t\t\t\t\t\tplaceholder=\"your-access-token\"\n\t\t\t\t\t\t\tvalue={ephemeralAccessToken}\n\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\tonChange={onAccessTokenChange}\n\t\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\t\"border rounded px-5 py-3 block font-mono text-base leading-none w-full\",\n\t\t\t\t\t\t\t\t!ephemeralAccessToken && \"text-center\",\n\t\t\t\t\t\t\t\tstate === \"IDLE\" &&\n\t\t\t\t\t\t\t\t\t\"border-slate-90 bg-slate-95 text-slate-30 placeholder-slate-70\",\n\t\t\t\t\t\t\t\tstate === \"INCORRECT\" &&\n\t\t\t\t\t\t\t\t\t\"border-red-40 bg-red-95 text-red-40 placeholder-red-80\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{state === \"INCORRECT\" && (\n\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\tvariant=\"sans-12-14\"\n\t\t\t\t\t\t\t\tclassName=\"text-red-40 font-semibold text-center\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tIncorrect token\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</label>\n\t\t\t\t\t<ul className=\"-ml-4 -mt-4 flex flex-wrap justify-center pointer-events-none\">\n\t\t\t\t\t\t<li className=\"pl-4 pt-4 pointer-events-auto\">\n\t\t\t\t\t\t\t<Button variant=\"white\" type=\"button\" onClick={onDismiss}>\n\t\t\t\t\t\t\t\t<Text variant=\"sans-14\" className=\"font-semibold\">\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"pl-4 pt-4 pointer-events-auto\">\n\t\t\t\t\t\t\t<Button variant=\"purple\" type=\"submit\">\n\t\t\t\t\t\t\t\t<Text variant=\"sans-14\" className=\"font-semibold\">\n\t\t\t\t\t\t\t\t\tContinue\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</form>\n\n\t\t\t\t<Text variant=\"sans-12\" className=\"text-center\">\n\t\t\t\t\tNot sure what your access token is? <br className=\"sm:hidden\" />\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={PRISMIC_DOCS_GENERATING_AN_ACCESS_TOKEN}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer nofollow\"\n\t\t\t\t\t\tclassName=\"text-purple-50 focus:text-purple-40 hover:text-purple-40 transition\"\n\t\t\t\t\t>\n\t\t\t\t\t\tLearn about generating one here.\n\t\t\t\t\t</a>\n\t\t\t\t</Text>\n\t\t\t</div>\n\t\t</Modal>\n\t);\n};\n","import * as React from \"react\";\n\nimport { VERSION } from \"../constants\";\n\nimport { Modal, ModalProps } from \"./Modal\";\nimport { Button } from \"./Button\";\nimport { Text } from \"./Text\";\n\ntype ModalErrorProps = {\n\terrorMessage?: string;\n} & Pick<ModalProps, \"repositoryName\" | \"isOpen\" | \"onDismiss\">;\n\nexport const ModalError = ({\n\trepositoryName,\n\terrorMessage,\n\tisOpen,\n\tonDismiss,\n}: ModalErrorProps): JSX.Element => {\n\treturn (\n\t\t<Modal\n\t\t\tvariant=\"red\"\n\t\t\trepositoryName={repositoryName}\n\t\t\tonDismiss={onDismiss}\n\t\t\tisOpen={isOpen}\n\t\t\taria-label={`Prismic preview error for ${repositoryName}`}\n\t\t>\n\t\t\t<div className=\"grid gap-6 sm:gap-7 justify-items-center\">\n\t\t\t\t<div className=\"grid gap-4\">\n\t\t\t\t\t<Text variant=\"sans-24\" className=\"text-center font-semibold\">\n\t\t\t\t\t\tError\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Text variant=\"sans-12-14\" className=\"text-center\">\n\t\t\t\t\t\tThe preview could not be loaded.\n\t\t\t\t\t</Text>\n\t\t\t\t</div>\n\n\t\t\t\t{errorMessage && (\n\t\t\t\t\t<Text variant=\"mono-20\" className=\"text-center my-2\">\n\t\t\t\t\t\t{errorMessage}\n\t\t\t\t\t</Text>\n\t\t\t\t)}\n\n\t\t\t\t<Button variant=\"whiteOutline\" onClick={onDismiss} className=\"mx-auto\">\n\t\t\t\t\t<Text variant=\"sans-14\" className=\"font-medium\">\n\t\t\t\t\t\tCancel Preview\n\t\t\t\t\t</Text>\n\t\t\t\t</Button>\n\n\t\t\t\t<dl className=\"text-red-80 flex flex-wrap -mt-5 -ml-5 justify-center\">\n\t\t\t\t\t<div className=\"grid gap-2 pl-5 pt-5 grid-flow-col\">\n\t\t\t\t\t\t<dt>\n\t\t\t\t\t\t\t<Text variant=\"sans-12\" className=\"font-semibold\">\n\t\t\t\t\t\t\t\tRepository\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</dt>\n\t\t\t\t\t\t<dd>\n\t\t\t\t\t\t\t<Text variant=\"sans-12\">{repositoryName}</Text>\n\t\t\t\t\t\t</dd>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"grid gap-2 pl-5 pt-5 grid-flow-col\">\n\t\t\t\t\t\t<dt>\n\t\t\t\t\t\t\t<Text variant=\"sans-12\" className=\"font-semibold\">\n\t\t\t\t\t\t\t\tPlugin Version\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</dt>\n\t\t\t\t\t\t<dd>\n\t\t\t\t\t\t\t<Text variant=\"sans-12\">{VERSION}</Text>\n\t\t\t\t\t\t</dd>\n\t\t\t\t\t</div>\n\t\t\t\t</dl>\n\t\t\t</div>\n\t\t</Modal>\n\t);\n};\n","import * as React from \"react\";\n\nimport { Modal, ModalProps } from \"./Modal\";\nimport { Button } from \"./Button\";\nimport { Text } from \"./Text\";\n\ntype ModalLoadingProps = Pick<\n\tModalProps,\n\t\"repositoryName\" | \"isOpen\" | \"onDismiss\"\n>;\n\nexport const ModalLoading = ({\n\trepositoryName,\n\tisOpen,\n\tonDismiss,\n}: ModalLoadingProps): JSX.Element => {\n\treturn (\n\t\t<Modal\n\t\t\trepositoryName={repositoryName}\n\t\t\tonDismiss={onDismiss}\n\t\t\tisOpen={isOpen}\n\t\t\taria-label={`Prismic preview loading for ${repositoryName}`}\n\t\t>\n\t\t\t<div className=\"grid gap-6 sm:gap-7 justify-items-center\">\n\t\t\t\t<div className=\"grid gap-5\">\n\t\t\t\t\t<Text\n\t\t\t\t\t\tvariant=\"sans-24\"\n\t\t\t\t\t\tclassName=\"text-slate-10 text-center font-semibold\"\n\t\t\t\t\t>\n\t\t\t\t\t\tFetching preview\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Text variant=\"sans-12-14\" className=\"text-center\">\n\t\t\t\t\t\tPlease wait while your updates are loading&hellip;\n\t\t\t\t\t</Text>\n\t\t\t\t</div>\n\n\t\t\t\t<Button variant=\"white\" onClick={onDismiss} className=\"mx-auto\">\n\t\t\t\t\t<Text variant=\"sans-14\" className=\"font-medium\">\n\t\t\t\t\t\tCancel Preview\n\t\t\t\t\t</Text>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</Modal>\n\t);\n};\n","import * as React from \"react\";\n\nimport { userFriendlyError } from \"../lib/userFriendlyError\";\n\nimport { PrismicContextActionType, PrismicPreviewState } from \"../context\";\nimport { usePrismicPreviewContext } from \"../usePrismicPreviewContext\";\nimport { usePrismicPreviewAccessToken } from \"../usePrismicPreviewAccessToken\";\n\nimport { Root } from \"./Root\";\nimport { ModalAccessToken } from \"./ModalAccessToken\";\nimport { ModalError } from \"./ModalError\";\nimport { ModalLoading } from \"./ModalLoading\";\n\ntype PrismicPreviewUIProps = {\n\tafterAccessTokenSet(): void;\n};\n\nexport const PrismicPreviewUI = ({\n\tafterAccessTokenSet,\n}: PrismicPreviewUIProps): JSX.Element => {\n\tconst [state, dispatch] = usePrismicPreviewContext();\n\tconst [accessToken, accessTokenActions] = usePrismicPreviewAccessToken(\n\t\tstate.activeRepositoryName,\n\t);\n\n\tconst goToIdle = () => dispatch({ type: PrismicContextActionType.GoToIdle });\n\n\t// TODO: Handle modal visibility state locally, not by transitioning globally to IDLE.\n\n\treturn (\n\t\t<>\n\t\t\t{state.activeRepositoryName && (\n\t\t\t\t<Root>\n\t\t\t\t\t<ModalLoading\n\t\t\t\t\t\tisOpen={\n\t\t\t\t\t\t\tstate.previewState === PrismicPreviewState.BOOTSTRAPPING ||\n\t\t\t\t\t\t\tstate.previewState === PrismicPreviewState.RESOLVING\n\t\t\t\t\t\t}\n\t\t\t\t\t\trepositoryName={state.activeRepositoryName}\n\t\t\t\t\t\tonDismiss={goToIdle}\n\t\t\t\t\t/>\n\t\t\t\t\t<ModalAccessToken\n\t\t\t\t\t\tisOpen={\n\t\t\t\t\t\t\tstate.previewState === PrismicPreviewState.PROMPT_FOR_ACCESS_TOKEN\n\t\t\t\t\t\t}\n\t\t\t\t\t\trepositoryName={state.activeRepositoryName}\n\t\t\t\t\t\tstate={accessToken ? \"INCORRECT\" : \"IDLE\"}\n\t\t\t\t\t\tinitialAccessToken={accessToken}\n\t\t\t\t\t\tsetAccessToken={accessTokenActions.set}\n\t\t\t\t\t\tafterSubmit={afterAccessTokenSet}\n\t\t\t\t\t\tonDismiss={goToIdle}\n\t\t\t\t\t/>\n\t\t\t\t\t<ModalError\n\t\t\t\t\t\tisOpen={state.previewState === PrismicPreviewState.FAILED}\n\t\t\t\t\t\trepositoryName={state.activeRepositoryName}\n\t\t\t\t\t\terrorMessage={\n\t\t\t\t\t\t\tstate.error ? userFriendlyError(state.error).message : undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonDismiss={goToIdle}\n\t\t\t\t\t/>\n\t\t\t\t</Root>\n\t\t\t)}\n\t\t</>\n\t);\n};\n","import * as React from \"react\";\nimport * as gatsby from \"gatsby\";\n\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nimport { FetchLike, PrismicRepositoryConfigs, UnknownRecord } from \"./types\";\nimport { usePrismicPreviewBootstrap } from \"./usePrismicPreviewBootstrap\";\nimport { useMergePrismicPreviewData } from \"./useMergePrismicPreviewData\";\nimport { usePrismicPreviewContext } from \"./usePrismicPreviewContext\";\nimport { PrismicContextActionType } from \"./context\";\n\nimport { PrismicPreviewUI } from \"./components/PrismicPreviewUI\";\n\nexport interface WithPrismicPreviewProps<\n\tTStaticData extends UnknownRecord = UnknownRecord,\n> {\n\tisPrismicPreview: boolean | null;\n\tprismicPreviewOriginalData: TStaticData;\n}\n\nexport type WithPrismicPreviewConfig = {\n\tmergePreviewData?: boolean;\n\tfetch?: FetchLike;\n};\n\n/**\n * A React higher order component (HOC) that wraps a Gatsby page to\n * automatically merge previewed content during a Prismic preview session.\n *\n * @param WrappedComponent - The Gatsby page component.\n * @param usePrismicPreviewBootstrapConfig - Configuration determining how the\n *   preview session is managed.\n * @param config - Configuration determining how the HOC handes previewed content.\n *\n * @returns `WrappedComponent` with automatic Prismic preview data.\n */\nexport const withPrismicPreview = <\n\tTStaticData extends UnknownRecord,\n\tTProps extends gatsby.PageProps<TStaticData>,\n>(\n\tWrappedComponent: React.ComponentType<\n\t\tTProps & WithPrismicPreviewProps<TStaticData>\n\t>,\n\trepositoryConfigs: PrismicRepositoryConfigs = [],\n\tconfig: WithPrismicPreviewConfig = {},\n): React.ComponentType<TProps> => {\n\tconst WithPrismicPreview = (props: TProps): React.ReactElement => {\n\t\tconst [, contextDispatch] = usePrismicPreviewContext();\n\t\tconst bootstrapPreview = usePrismicPreviewBootstrap(repositoryConfigs, {\n\t\t\tfetch: config.fetch,\n\t\t});\n\t\tconst mergedData = useMergePrismicPreviewData(props.data, {\n\t\t\tskip: config.mergePreviewData,\n\t\t});\n\n\t\tconst afterAccessTokenSet = React.useCallback(() => {\n\t\t\tcontextDispatch({ type: PrismicContextActionType.GoToIdle });\n\t\t\tbootstrapPreview();\n\t\t}, [bootstrapPreview, contextDispatch]);\n\n\t\tReact.useEffect(() => {\n\t\t\tbootstrapPreview();\n\t\t}, [bootstrapPreview]);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<WrappedComponent\n\t\t\t\t\t{...props}\n\t\t\t\t\tdata={mergedData.data}\n\t\t\t\t\tisPrismicPreview={mergedData.isPreview}\n\t\t\t\t\tprismicPreviewOriginalData={props.data}\n\t\t\t\t/>\n\t\t\t\t<PrismicPreviewUI afterAccessTokenSet={afterAccessTokenSet} />\n\t\t\t</>\n\t\t);\n\t};\n\n\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\tWithPrismicPreview.displayName = `withPrismicPreview(${wrappedComponentName})`;\n\n\treturn WithPrismicPreview;\n};\n","import * as React from \"react\";\nimport * as gatsby from \"gatsby\";\n\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nimport { FetchLike, PrismicRepositoryConfigs } from \"./types\";\nimport { usePrismicPreviewResolver } from \"./usePrismicPreviewResolver\";\nimport { usePrismicPreviewContext } from \"./usePrismicPreviewContext\";\n\nimport {\n\tPrismicContextActionType,\n\tPrismicContextState,\n\tPrismicPreviewState,\n} from \"./context\";\nimport { PrismicPreviewUI } from \"./components/PrismicPreviewUI\";\n\nexport interface WithPrismicPreviewResolverProps {\n\tisPrismicPreview: boolean | null;\n\tprismicPreviewPath: PrismicContextState[\"resolvedPath\"];\n}\n\nexport type WithPrismicPreviewResolverConfig = {\n\tautoRedirect?: boolean;\n\tnavigate?: typeof gatsby.navigate;\n\tfetch?: FetchLike;\n};\n\n/**\n * A React higher order component (HOC) that wraps a Gatsby page to\n * automatically setup a Prismic preview resolver page. It can automatically\n * redirect an editor to the previewed document's page.\n *\n * @param WrappedComponent - The Gatsby page component.\n * @param usePrismicPreviewResolverConfig - Configuration determining how the\n *   preview session is resolved.\n * @param config - Configuration determining how the HOC handes the resolved preview.\n *\n * @returns `WrappedComponent` with automatic Prismic preview resolving.\n */\nexport const withPrismicPreviewResolver = <TProps extends gatsby.PageProps>(\n\tWrappedComponent: React.ComponentType<\n\t\tTProps & WithPrismicPreviewResolverProps\n\t>,\n\trepositoryConfigs: PrismicRepositoryConfigs = [],\n\tconfig: WithPrismicPreviewResolverConfig = {},\n): React.ComponentType<TProps> => {\n\tconst WithPrismicPreviewResolver = (props: TProps): React.ReactElement => {\n\t\tconst [contextState, contextDispatch] = usePrismicPreviewContext();\n\t\tconst resolvePreview = usePrismicPreviewResolver(repositoryConfigs, {\n\t\t\tfetch: config.fetch,\n\t\t});\n\n\t\tconst isPreview =\n\t\t\tcontextState.previewState === PrismicPreviewState.IDLE\n\t\t\t\t? null\n\t\t\t\t: contextState.previewState !== PrismicPreviewState.NOT_PREVIEW;\n\n\t\tconst afterAccessTokenSet = React.useCallback(() => {\n\t\t\tcontextDispatch({ type: PrismicContextActionType.GoToIdle });\n\t\t\tresolvePreview();\n\t\t}, [resolvePreview, contextDispatch]);\n\n\t\tReact.useEffect(() => {\n\t\t\tresolvePreview();\n\t\t}, [resolvePreview]);\n\n\t\tReact.useEffect(() => {\n\t\t\tif (contextState.resolvedPath && (config.autoRedirect ?? true)) {\n\t\t\t\tconst navigate = config.navigate || gatsby.navigate;\n\n\t\t\t\tnavigate(contextState.resolvedPath);\n\t\t\t}\n\t\t}, [contextState.resolvedPath]);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<WrappedComponent\n\t\t\t\t\t{...props}\n\t\t\t\t\tisPrismicPreview={isPreview}\n\t\t\t\t\tprismicPreviewPath={contextState.resolvedPath}\n\t\t\t\t/>\n\t\t\t\t<PrismicPreviewUI afterAccessTokenSet={afterAccessTokenSet} />\n\t\t\t</>\n\t\t);\n\t};\n\n\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\tWithPrismicPreviewResolver.displayName = `withPrismicPreviewResolver(${wrappedComponentName})`;\n\n\treturn WithPrismicPreviewResolver;\n};\n","import * as cc from \"camel-case\";\n\n/**\n * Converts a collection of strings to a single camel cased string.\n *\n * @param parts - Strings to convert into a single camel cased string.\n *\n * @returns Camel cased string version of `parts`.\n */\nexport const camelCase = (...parts: (string | null | undefined)[]): string =>\n\tcc.camelCase(parts.filter((p) => p != null).join(\" \"), {\n\t\ttransform: cc.camelCaseTransformMerge,\n\t});\n","import * as React from \"react\";\nimport * as gatsby from \"gatsby\";\nimport * as gatsbyPrismic from \"gatsby-source-prismic\";\n\nimport { camelCase } from \"./lib/camelCase\";\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nimport {\n\tFetchLike,\n\tPrismicUnpublishedRepositoryConfig,\n\tPrismicUnpublishedRepositoryConfigs,\n\tUnknownRecord,\n} from \"./types\";\nimport { usePrismicPreviewBootstrap } from \"./usePrismicPreviewBootstrap\";\nimport { usePrismicPreviewContext } from \"./usePrismicPreviewContext\";\nimport { PrismicContextActionType, PrismicPreviewState } from \"./context\";\nimport { PrismicPreviewUI } from \"./components/PrismicPreviewUI\";\n\n/**\n * A convenience function to create a `componentResolver` function from a record\n * mapping a Prismic document type to a React component.\n *\n * In most cases, this convenience function is sufficient to provide a working\n * unpublished preview experience.\n *\n * @param componentMap - A record mapping a Prismic document type to a React component.\n *\n * @returns A `componentResolver` function that can be passed to\n *   `withPrismicUnpublishedPreview`'s configuration.\n */\nexport const componentResolverFromMap =\n\t(\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tcomponentMap: Record<string, React.ComponentType<any>>,\n\t): PrismicUnpublishedRepositoryConfig[\"componentResolver\"] =>\n\t(nodes) => {\n\t\tif (nodes.length > 0) {\n\t\t\treturn componentMap[nodes[0].type] || null;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n/**\n * A `dataResolver` function that assumes the first matching node for the page's\n * URL is the primary document. The document is added to the page's `data` prop\n * using the Prismic document's type formatted using Gatsby's camel-cased query\n * convention.\n */\nexport const defaultDataResolver: PrismicUnpublishedRepositoryConfig[\"dataResolver\"] =\n\t(nodes, data) => {\n\t\tif (nodes.length > 0) {\n\t\t\tconst key = camelCase(nodes[0].internal.type);\n\n\t\t\treturn {\n\t\t\t\t...data,\n\t\t\t\t[key]: nodes[0],\n\t\t\t};\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t};\n\nconst useNodesForPath = (\n\tpath: string,\n): gatsbyPrismic.NormalizedDocumentValue[] => {\n\tconst [state, setState] = React.useState(0);\n\tconst rerender = () => setState((i) => i + 1);\n\n\tconst activeRuntime = useActiveRuntime();\n\n\tReact.useEffect(() => {\n\t\tif (activeRuntime) {\n\t\t\tactiveRuntime.subscribe(rerender);\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (activeRuntime) {\n\t\t\t\tactiveRuntime.unsubscribe(rerender);\n\t\t\t}\n\t\t};\n\t}, [activeRuntime]);\n\n\treturn React.useMemo(() => {\n\t\t// To appease the exhaustive-deps linter rule\n\t\tstate;\n\n\t\treturn activeRuntime\n\t\t\t? activeRuntime.nodes.filter((node) => node.url === path)\n\t\t\t: [];\n\t}, [state, path, activeRuntime]);\n};\n\nconst useActiveRuntime = (): gatsbyPrismic.Runtime | undefined => {\n\tconst [contextState] = usePrismicPreviewContext();\n\n\treturn React.useMemo(\n\t\t() =>\n\t\t\tcontextState.activeRepositoryName\n\t\t\t\t? contextState.runtimeStore[contextState.activeRepositoryName]\n\t\t\t\t: undefined,\n\t\t[contextState.activeRepositoryName, contextState.runtimeStore],\n\t);\n};\n\nconst useActiveRepositoryConfig = (\n\trepositoryConfigs: PrismicUnpublishedRepositoryConfigs = [],\n) => {\n\tconst [contextState] = usePrismicPreviewContext();\n\n\treturn React.useMemo(\n\t\t() =>\n\t\t\t[...repositoryConfigs, ...contextState.repositoryConfigs].find(\n\t\t\t\t(config) => config.repositoryName === contextState.activeRepositoryName,\n\t\t\t),\n\t\t[\n\t\t\tcontextState.activeRepositoryName,\n\t\t\tcontextState.repositoryConfigs,\n\t\t\trepositoryConfigs,\n\t\t],\n\t);\n};\n\nexport type WithPrismicUnpublishedPreviewConfig = {\n\tfetch?: FetchLike;\n};\n\n/**\n * A React higher order component (HOC) that wraps a Gatsby page to\n * automatically display a template for an unpublished Prismic document. This\n * HOC should be used on your app's 404 page (usually `src/pages/404.js`).\n *\n * @param WrappedComponent - The Gatsby page component.\n * @param usePrismicPreviewBootstrapConfig - Configuration determining how the\n *   preview session is managed.\n * @param config - Configuration determining how the HOC handes previewed content.\n *\n * @returns `WrappedComponent` with automatic unpublished Prismic preview data.\n */\nexport const withPrismicUnpublishedPreview = <\n\tTStaticData extends UnknownRecord,\n\tTProps extends gatsby.PageProps<TStaticData>,\n>(\n\tWrappedComponent: React.ComponentType<TProps>,\n\trepositoryConfigs?: PrismicUnpublishedRepositoryConfigs,\n\tconfig: WithPrismicUnpublishedPreviewConfig = {},\n): React.ComponentType<TProps> => {\n\tconst WithPrismicUnpublishedPreview = (props: TProps): React.ReactElement => {\n\t\tconst [contextState, contextDispatch] = usePrismicPreviewContext();\n\t\tconst bootstrapPreview = usePrismicPreviewBootstrap(repositoryConfigs, {\n\t\t\tfetch: config.fetch,\n\t\t});\n\t\tconst nodesForPath = useNodesForPath(props.location.pathname);\n\t\tconst repositoryConfig = useActiveRepositoryConfig(repositoryConfigs);\n\n\t\tconst ResolvedComponent = React.useMemo(\n\t\t\t() =>\n\t\t\t\trepositoryConfig?.componentResolver(nodesForPath) ?? WrappedComponent,\n\t\t\t[repositoryConfig, nodesForPath],\n\t\t);\n\n\t\tconst resolvedData = React.useMemo(() => {\n\t\t\tconst dataResolver =\n\t\t\t\trepositoryConfig?.dataResolver || defaultDataResolver;\n\n\t\t\treturn dataResolver(nodesForPath, props.data);\n\t\t}, [repositoryConfig?.dataResolver, nodesForPath, props.data]);\n\n\t\tconst afterAccessTokenSet = React.useCallback(() => {\n\t\t\tcontextDispatch({ type: PrismicContextActionType.GoToIdle });\n\t\t\tbootstrapPreview();\n\t\t}, [bootstrapPreview, contextDispatch]);\n\n\t\tReact.useEffect(() => {\n\t\t\tbootstrapPreview();\n\t\t}, [bootstrapPreview]);\n\n\t\treturn contextState.previewState === PrismicPreviewState.ACTIVE ? (\n\t\t\t<ResolvedComponent {...props} data={resolvedData} />\n\t\t) : (\n\t\t\t<>\n\t\t\t\t<WrappedComponent {...props} />\n\t\t\t\t<PrismicPreviewUI afterAccessTokenSet={afterAccessTokenSet} />\n\t\t\t</>\n\t\t);\n\t};\n\n\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\tWithPrismicUnpublishedPreview.displayName = `withPrismicUnpublishedPreview(${wrappedComponentName})`;\n\n\treturn WithPrismicUnpublishedPreview;\n};\n"],"names":["pkg.version","PrismicPreviewState","PrismicContextActionType","gatsbyPrismic","cookie","React","O","gatsby","E","prismic","root","DialogOverlay","DialogContent","clsx","cc"],"mappings":"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"}