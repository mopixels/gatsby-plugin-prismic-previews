{"version":3,"file":"gatsby-node.cjs","sources":["../src/constants.ts","../src/plugin-options-schema.ts","../src/lib/serializeTypePathsNodes.ts","../src/lib/sprintf.ts","../src/on-post-bootstrap.ts"],"sourcesContent":["import * as pkg from \"../package.json\";\n\n/**\n * Version of the gatsby-plugin-prismic-preview plugin. This version may be\n * displayed publicly to help debug errors.\n */\nexport const VERSION = pkg.version;\n\n/**\n * Symbol used to identify if a value is a proxy. Attach this to proxies (done\n * automatically via `lib/createGetProxy`).\n */\nexport const IS_PROXY = Symbol(\"IS_PROXY\");\n\n/**\n * Default value for the `toolbar` plugin option which determines which version\n * of the Prismic Toolbar to render.\n */\nexport const DEFAULT_TOOLBAR = \"new\";\n\n/**\n * Default value for the `promptForAccessToken` plugin option which determines\n * if an editor should be prompted for an access token if one has not already\n * been provided.\n */\nexport const DEFAULT_PROMPT_FOR_ACCESS_TOKEN = true;\n\n/**\n * Default page size for Prismic API query requests. This is the maximum allowed\n * page size to minimize the number of requests.\n */\nexport const QUERY_PAGE_SIZE = 100;\n\n/**\n * Template used to generate a hash for a collection of type paths.\n */\nexport const TYPE_PATHS_BASENAME_TEMPLATE = \"type-paths-store %s\";\n\n/**\n * Identifier used to store plugin options on `window` to pass to other parts of\n * the preview system.\n */\nexport const WINDOW_PLUGIN_OPTIONS_KEY =\n\t\"__GATSBY_PLUGIN_PRISMIC_PREVIEWS_PLUGIN_OPTIONS__\";\n\n/**\n * Identifier used to store plugin options on `window` to pass to other parts of\n * the preview system.\n */\nexport const WINDOW_PROVIDER_PRESENCE_KEY =\n\t\"__GATSBY_PLUGIN_PRISMIC_PREVIEWS_PROVIDER_PRESENCE__\";\n\n/**\n * Name of the locally stored Prismic repository access token.\n */\nexport const COOKIE_ACCESS_TOKEN_NAME =\n\t\"gatsby-plugin-prismic-previews.%s.accessToken\";\n\n/**\n * Template used when reporting which includes a namespace.\n */\nexport const REPORTER_TEMPLATE = \"gatsby-plugin-prismic-previews(%s) - %s\";\n\n/**\n * Template used to report the location of the serialized type paths store.\n */\nexport const WROTE_TYPE_PATHS_TO_FS_MSG = \"Wrote type paths store to %s\";\n\n/**\n * Message used when type paths cannot be found for a repository.\n */\nexport const TYPE_PATHS_MISSING_NODE_MSG = `Type paths for this repository could not be found. Check that you have gatsby-source-prismic configured with the same repository name and type prefix (if used) in gatsby-config.js.`;\n\n/**\n * Message used when serialized type paths cannot be found for a repository.\n */\nexport const TYPE_PATHS_MISSING_BROWSER_MSG =\n\t\"The type paths store for this repository could not be found.\";\n\n/**\n * Message used when a field does not match its expected type.\n */\nexport const FIELD_VALUE_TYPE_PATH_MISMATCH_MSG =\n\t'Field value at \"%s\" does not match the type declared in its type path: %s';\n\n/**\n * Message used when a repository configuration is not provided.\n */\nexport const MISSING_REPOSITORY_CONFIG_MSG =\n\t'A configuration object could not be found for repository \"%s\". Check that the repository is configured in your app\\'s %s.';\n\n/**\n * Message used when repository plugin options are not provided.\n */\nexport const MISSING_PLUGIN_OPTIONS_MSG =\n\t'Plugin options could not be found for repository \"%s\". Check that the repository is configured in your app\\'s gatsby-config.js';\n\n/**\n * Message used when the required context provider is not added.\n */\nexport const MISSING_PROVIDER_MSG = `A <PrismicPreviewProvider> was not found in your app. Add <PrismicPreviewProvider> to your app's gatsby-browser.js and gatsby-ssr.js wrapRootElement exports.\n\nSee: https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/#wrapRootElement\nSee: https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr/#wrapRootElement`;\n","import * as gatsby from \"gatsby\";\nimport * as prismic from \"@prismicio/client\";\nimport { promises as fs } from \"fs\";\nimport {\n\tDEFAULT_IMGIX_PARAMS,\n\tDEFAULT_LANG,\n\tDEFAULT_PLACEHOLDER_IMGIX_PARAMS,\n} from \"gatsby-source-prismic\";\n\nimport { DEFAULT_PROMPT_FOR_ACCESS_TOKEN, DEFAULT_TOOLBAR } from \"./constants\";\nimport { WriteTypePathsToFilesystemArgs } from \"./types\";\n\n/**\n * Run during the bootstrap phase. Plugins can use this to define a schema for\n * their options using Joi to validate the options users pass to the plugin.\n *\n * @see https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#pluginOptionsSchema\n */\nexport const pluginOptionsSchema: NonNullable<\n\tgatsby.GatsbyNode[\"pluginOptionsSchema\"]\n> = function (args) {\n\tconst { Joi } = args;\n\n\tconst schema = Joi.object({\n\t\trepositoryName: Joi.string().required(),\n\t\taccessToken: Joi.string(),\n\t\tpromptForAccessToken: Joi.boolean().default(\n\t\t\tDEFAULT_PROMPT_FOR_ACCESS_TOKEN,\n\t\t),\n\t\tapiEndpoint: Joi.string().default((parent) =>\n\t\t\tprismic.getEndpoint(parent.repositoryName),\n\t\t),\n\t\troutes: Joi.array().items(\n\t\t\tJoi.object({\n\t\t\t\ttype: Joi.string().required(),\n\t\t\t\tpath: Joi.string().required(),\n\t\t\t\tresolvers: Joi.object().pattern(Joi.string(), Joi.string().required()),\n\t\t\t}),\n\t\t),\n\t\tgraphQuery: Joi.string(),\n\t\tfetchLinks: Joi.array().items(Joi.string().required()),\n\t\tlang: Joi.string().default(DEFAULT_LANG),\n\t\t// TODO: Remove the hardcoded default once this PR to @prismicio/client is merged:\n\t\t// https://github.com/prismicio/prismic-client/pull/195\n\t\tpageSize: Joi.number().default(100),\n\t\timageImgixParams: Joi.object().default(DEFAULT_IMGIX_PARAMS),\n\t\timagePlaceholderImgixParams: Joi.object().default(\n\t\t\tDEFAULT_PLACEHOLDER_IMGIX_PARAMS,\n\t\t),\n\t\ttypePrefix: Joi.string(),\n\t\ttoolbar: Joi.string().valid(\"new\", \"legacy\").default(DEFAULT_TOOLBAR),\n\t\twriteTypePathsToFilesystem: Joi.function().default(\n\t\t\t() => async (args: WriteTypePathsToFilesystemArgs) =>\n\t\t\t\tawait fs.writeFile(args.publicPath, args.serializedTypePaths),\n\t\t),\n\t}).oxor(\"fetchLinks\", \"graphQuery\");\n\n\treturn schema;\n};\n","import * as gatsbyPrismic from \"gatsby-source-prismic\";\n\nexport const serializeTypePathNodes = (\n\ttypePathNodes: gatsbyPrismic.TypePathNode[],\n): string => {\n\treturn JSON.stringify(\n\t\ttypePathNodes.map((node) => ({\n\t\t\tkind: node.kind,\n\t\t\ttype: node.type,\n\t\t\tpath: node.path,\n\t\t})),\n\t);\n};\n","/**\n * Interpolate values into a string using a `sprintf`-like syntax. Each instance\n * of \"`%s`\" in the string will be replaced with a given value in the order they\n * are given.\n *\n * @param string - String into which values will be interpolated.\n * @param args - Values which will be interpolated into `string`.\n *\n * @returns String with interpolated values.\n * @see https://gist.github.com/rmariuzzo/8761698#gistcomment-2375590\n */\nexport const sprintf = (string: string, ...args: string[]): string => {\n\tlet i = 0;\n\n\treturn string.replace(/%s/g, () => args[i++]);\n};\n","import * as gatsby from \"gatsby\";\nimport * as gatsbyPrismic from \"gatsby-source-prismic\";\nimport * as path from \"path\";\nimport { createNodeHelpers } from \"gatsby-node-helpers\";\nimport md5 from \"tiny-hashes/md5\";\n\nimport { serializeTypePathNodes } from \"./lib/serializeTypePathsNodes\";\nimport { sprintf } from \"./lib/sprintf\";\n\nimport {\n\tTYPE_PATHS_MISSING_NODE_MSG,\n\tWROTE_TYPE_PATHS_TO_FS_MSG,\n\tREPORTER_TEMPLATE,\n\tTYPE_PATHS_BASENAME_TEMPLATE,\n} from \"./constants\";\nimport { PluginOptions } from \"./types\";\n\n/**\n * Called at the end of the bootstrap process after all other extension APIs\n * have been called.\n *\n * @see https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#onPostBootstrap\n */\nexport const onPostBootstrap: NonNullable<\n\tgatsby.GatsbyNode[\"onPostBootstrap\"]\n> = async (gatsbyContext, pluginOptions: PluginOptions) => {\n\tconst nodeHelpers = createNodeHelpers({\n\t\ttypePrefix: [gatsbyPrismic.GLOBAL_TYPE_PREFIX, pluginOptions.typePrefix]\n\t\t\t.filter(Boolean)\n\t\t\t.join(\" \"),\n\t\tfieldPrefix: gatsbyPrismic.GLOBAL_TYPE_PREFIX,\n\t\tcreateNodeId: gatsbyContext.createNodeId,\n\t\tcreateContentDigest: gatsbyContext.createContentDigest,\n\t});\n\n\tconst typePathNodes = gatsbyContext.getNodesByType(\n\t\tnodeHelpers.createTypeName(\"TypePathType\"),\n\t) as gatsbyPrismic.TypePathNode[];\n\n\tif (typePathNodes.length < 1) {\n\t\tgatsbyContext.reporter.panic(\n\t\t\tsprintf(\n\t\t\t\tREPORTER_TEMPLATE,\n\t\t\t\tpluginOptions.repositoryName,\n\t\t\t\tTYPE_PATHS_MISSING_NODE_MSG,\n\t\t\t),\n\t\t);\n\t}\n\n\tconst serializedTypePaths = serializeTypePathNodes(typePathNodes);\n\n\tconst filename = `${md5(\n\t\tsprintf(TYPE_PATHS_BASENAME_TEMPLATE, pluginOptions.repositoryName),\n\t)}.json`;\n\tconst publicPath = path.join(\"public\", \"static\", filename);\n\n\tawait pluginOptions.writeTypePathsToFilesystem({\n\t\tpublicPath,\n\t\tserializedTypePaths,\n\t});\n\n\tgatsbyContext.reporter.verbose(\n\t\tsprintf(\n\t\t\tREPORTER_TEMPLATE,\n\t\t\tpluginOptions.repositoryName,\n\t\t\tsprintf(WROTE_TYPE_PATHS_TO_FS_MSG, publicPath),\n\t\t),\n\t);\n};\n"],"names":["prismic","DEFAULT_LANG","DEFAULT_IMGIX_PARAMS","DEFAULT_PLACEHOLDER_IMGIX_PARAMS","fs","createNodeHelpers","gatsbyPrismic","md5","path"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkBa,kBAAkB;MAOlB,kCAAkC;MAWlC,+BAA+B;MAyB/B,oBAAoB;MAKpB,6BAA6B;MAK7B,8BAA8B;;MCrD9B,sBAET,SAAU,MAAM;AACnB,QAAM,EAAE,QAAQ;AAEhB,QAAM,SAAS,IAAI,OAAO;AAAA,IACzB,gBAAgB,IAAI,SAAS;AAAA,IAC7B,aAAa,IAAI;AAAA,IACjB,sBAAsB,IAAI,UAAU,QACnC;AAAA,IAED,aAAa,IAAI,SAAS,QAAQ,CAAC,WAClCA,mBAAQ,YAAY,OAAO;AAAA,IAE5B,QAAQ,IAAI,QAAQ,MACnB,IAAI,OAAO;AAAA,MACV,MAAM,IAAI,SAAS;AAAA,MACnB,MAAM,IAAI,SAAS;AAAA,MACnB,WAAW,IAAI,SAAS,QAAQ,IAAI,UAAU,IAAI,SAAS;AAAA;AAAA,IAG7D,YAAY,IAAI;AAAA,IAChB,YAAY,IAAI,QAAQ,MAAM,IAAI,SAAS;AAAA,IAC3C,MAAM,IAAI,SAAS,QAAQC;AAAA,IAG3B,UAAU,IAAI,SAAS,QAAQ;AAAA,IAC/B,kBAAkB,IAAI,SAAS,QAAQC;AAAA,IACvC,6BAA6B,IAAI,SAAS,QACzCC;AAAA,IAED,YAAY,IAAI;AAAA,IAChB,SAAS,IAAI,SAAS,MAAM,OAAO,UAAU,QAAQ;AAAA,IACrD,4BAA4B,IAAI,WAAW,QAC1C,MAAM,OAAO,UACZ,MAAMC,YAAG,UAAU,MAAK,YAAY,MAAK;AAAA,KAEzC,KAAK,cAAc;AAEtB,SAAO;AAAA;;MCvDK,yBAAyB,CACrC,kBACY;AACZ,SAAO,KAAK,UACX,cAAc,IAAI,CAAC;AAAU,IAC5B,MAAM,KAAK;AAAA,IACX,MAAM,KAAK;AAAA,IACX,MAAM,KAAK;AAAA;AAAA;;MCED,UAAU,CAAC,WAAmB,SAA2B;AACrE,MAAI,IAAI;AAER,SAAO,OAAO,QAAQ,OAAO,MAAM,KAAK;AAAA;;MCS5B,kBAET,OAAO,eAAe,kBAAiC;AAC1D,QAAM,cAAcC,oCAAkB;AAAA,IACrC,YAAY,CAACC,yBAAc,oBAAoB,cAAc,YAC3D,OAAO,SACP,KAAK;AAAA,IACP,aAAaA,yBAAc;AAAA,IAC3B,cAAc,cAAc;AAAA,IAC5B,qBAAqB,cAAc;AAAA;AAGpC,QAAM,gBAAgB,cAAc,eACnC,YAAY,eAAe;AAG5B,MAAI,cAAc,SAAS,GAAG;AAC7B,kBAAc,SAAS,MACtB,QACC,mBACA,cAAc,gBACd;AAAA;AAKH,QAAM,sBAAsB,uBAAuB;AAEnD,QAAM,WAAW,GAAGC,wBACnB,QAAQ,8BAA8B,cAAc;AAErD,QAAM,aAAaC,gBAAK,KAAK,UAAU,UAAU;AAEjD,QAAM,cAAc,2BAA2B;AAAA,IAC9C;AAAA,IACA;AAAA;AAGD,gBAAc,SAAS,QACtB,QACC,mBACA,cAAc,gBACd,QAAQ,4BAA4B;AAAA;;;;;"}