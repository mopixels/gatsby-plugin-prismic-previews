{"version":3,"file":"gatsby-browser.js","sources":["../src/constants.ts","../src/on-client-entry.ts"],"sourcesContent":["import * as pkg from \"../package.json\";\n\n/**\n * Version of the gatsby-plugin-prismic-preview plugin. This version may be\n * displayed publicly to help debug errors.\n */\nexport const VERSION = pkg.version;\n\n/**\n * Symbol used to identify if a value is a proxy. Attach this to proxies (done\n * automatically via `lib/createGetProxy`).\n */\nexport const IS_PROXY = Symbol(\"IS_PROXY\");\n\n/**\n * Default value for the `toolbar` plugin option which determines which version\n * of the Prismic Toolbar to render.\n */\nexport const DEFAULT_TOOLBAR = \"new\";\n\n/**\n * Default value for the `promptForAccessToken` plugin option which determines\n * if an editor should be prompted for an access token if one has not already\n * been provided.\n */\nexport const DEFAULT_PROMPT_FOR_ACCESS_TOKEN = true;\n\n/**\n * Default page size for Prismic API query requests. This is the maximum allowed\n * page size to minimize the number of requests.\n */\nexport const QUERY_PAGE_SIZE = 100;\n\n/**\n * Template used to generate a hash for a collection of type paths.\n */\nexport const TYPE_PATHS_BASENAME_TEMPLATE = \"type-paths-store %s\";\n\n/**\n * Identifier used to store plugin options on `window` to pass to other parts of\n * the preview system.\n */\nexport const WINDOW_PLUGIN_OPTIONS_KEY =\n\t\"__GATSBY_PLUGIN_PRISMIC_PREVIEWS_PLUGIN_OPTIONS__\";\n\n/**\n * Identifier used to store plugin options on `window` to pass to other parts of\n * the preview system.\n */\nexport const WINDOW_PROVIDER_PRESENCE_KEY =\n\t\"__GATSBY_PLUGIN_PRISMIC_PREVIEWS_PROVIDER_PRESENCE__\";\n\n/**\n * Name of the locally stored Prismic repository access token.\n */\nexport const COOKIE_ACCESS_TOKEN_NAME =\n\t\"gatsby-plugin-prismic-previews.%s.accessToken\";\n\n/**\n * Template used when reporting which includes a namespace.\n */\nexport const REPORTER_TEMPLATE = \"gatsby-plugin-prismic-previews(%s) - %s\";\n\n/**\n * Template used to report the location of the serialized type paths store.\n */\nexport const WROTE_TYPE_PATHS_TO_FS_MSG = \"Wrote type paths store to %s\";\n\n/**\n * Message used when type paths cannot be found for a repository.\n */\nexport const TYPE_PATHS_MISSING_NODE_MSG = `Type paths for this repository could not be found. Check that you have gatsby-source-prismic configured with the same repository name and type prefix (if used) in gatsby-config.js.`;\n\n/**\n * Message used when serialized type paths cannot be found for a repository.\n */\nexport const TYPE_PATHS_MISSING_BROWSER_MSG =\n\t\"The type paths store for this repository could not be found.\";\n\n/**\n * Message used when a field does not match its expected type.\n */\nexport const FIELD_VALUE_TYPE_PATH_MISMATCH_MSG =\n\t'Field value at \"%s\" does not match the type declared in its type path: %s';\n\n/**\n * Message used when a repository configuration is not provided.\n */\nexport const MISSING_REPOSITORY_CONFIG_MSG =\n\t'A configuration object could not be found for repository \"%s\". Check that the repository is configured in your app\\'s %s.';\n\n/**\n * Message used when repository plugin options are not provided.\n */\nexport const MISSING_PLUGIN_OPTIONS_MSG =\n\t'Plugin options could not be found for repository \"%s\". Check that the repository is configured in your app\\'s gatsby-config.js';\n\n/**\n * Message used when the required context provider is not added.\n */\nexport const MISSING_PROVIDER_MSG = `A <PrismicPreviewProvider> was not found in your app. Add <PrismicPreviewProvider> to your app's gatsby-browser.js and gatsby-ssr.js wrapRootElement exports.\n\nSee: https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/#wrapRootElement\nSee: https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr/#wrapRootElement`;\n","import * as gatsby from \"gatsby\";\n\nimport { PluginOptions } from \"./types\";\nimport { WINDOW_PLUGIN_OPTIONS_KEY } from \"./constants\";\n\n/**\n * Called when the Gatsby browser runtime first starts.\n *\n * @see https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/#onClientEntry\n */\nexport const onClientEntry: NonNullable<gatsby.GatsbyBrowser[\"onClientEntry\"]> =\n\t(_gatsbyContext, pluginOptions: PluginOptions) => {\n\t\tif (typeof window !== \"undefined\") {\n\t\t\twindow[WINDOW_PLUGIN_OPTIONS_KEY] = {\n\t\t\t\t...window[WINDOW_PLUGIN_OPTIONS_KEY],\n\t\t\t\t[pluginOptions.repositoryName]: pluginOptions,\n\t\t\t};\n\n\t\t\tif (pluginOptions.toolbar === \"legacy\") {\n\t\t\t\twindow.prismic = {\n\t\t\t\t\t...window.prismic,\n\t\t\t\t\tendpoint: pluginOptions.apiEndpoint,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n"],"names":[],"mappings":";;;;MA0Ca,4BACZ;;MCjCY,gBACZ,CAAC,gBAAgB,kBAAiC;AACjD,MAAI,OAAO,WAAW,aAAa;AAClC,WAAO,6BAA6B;AAAA,SAChC,OAAO;AAAA,OACT,cAAc,iBAAiB;AAAA;AAGjC,QAAI,cAAc,YAAY,UAAU;AACvC,aAAO,UAAU;AAAA,WACb,OAAO;AAAA,QACV,UAAU,cAAc;AAAA;AAAA;AAAA;AAAA;;;;"}